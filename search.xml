<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 2]]></title>
      <url>/2017/07/31/COSC1285/COSC1285-Algorithms-Week-2/</url>
      <content type="html"><![CDATA[<p>Notes from lectures on Big O and Big Omega notation for grouping algorithms by orders of growth.</p>
<a id="more"></a>
<h3 id="Common-Equivalence-Classes"><a href="#Common-Equivalence-Classes" class="headerlink" title="Common Equivalence Classes"></a>Common Equivalence Classes</h3><p>Table of common usage is in textbook page 59 (pdf 87)</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Big O</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>Constant</td>
<td>$O(1)$</td>
<td>Access array element</td>
</tr>
<tr>
<td>Logarithmic</td>
<td>$O(\log{n})$</td>
<td>Binary search</td>
</tr>
<tr>
<td>Linear</td>
<td>$O(n)$</td>
<td>Link list search</td>
</tr>
<tr>
<td>Linearithmic (Supralinear)</td>
<td>$O(n\log{n})$</td>
<td>Merge sorting</td>
</tr>
<tr>
<td>Quadratic</td>
<td>$O(n^2)$</td>
<td>Selection sorting</td>
</tr>
<tr>
<td>Exponential</td>
<td>$O(2^n)$</td>
<td>Generating all subsets</td>
</tr>
<tr>
<td>Factorial</td>
<td>$O(n!)$</td>
<td>Generating all permutations</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Upper-and-Lower-Bound-Examples"><a href="#Upper-and-Lower-Bound-Examples" class="headerlink" title="Upper and Lower Bound Examples"></a>Upper and Lower Bound Examples</h3><ul>
<li>$O$ Upper Bound. Equal or lower order of growth.</li>
<li>$\Omega$ Lower Bound. Equal or higher order of growth</li>
</ul>
<p>Explanation of these is in textbook page 52 (pdf 80)</p>
<p>Therefore the lecture examples;</p>
<table>
<thead>
<tr>
<th>$t(n)$</th>
<th style="text-align:center">$O(n)$</th>
<th style="text-align:center">$O(n^2)$</th>
<th style="text-align:center">$O(n^3)$</th>
<th style="text-align:center">$\Omega{(n)}$</th>
<th style="text-align:center">$\Omega{(n^2)}$</th>
<th style="text-align:center">$\Omega{(n^3)}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\log_2{n}$</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$10n+5$</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$\frac{n(n-1)}{2}$</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$(n+1)^3$</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
</tr>
<tr>
<td>$2^n$</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 1]]></title>
      <url>/2017/07/31/COSC1285/COSC1285-Algorithms-Week-1/</url>
      <content type="html"><![CDATA[<p>Some Javascript implementations of two algorithms from the <strong><em>Introduction to the Design and Analysis of Algorithms</em></strong> textbook.</p>
<a id="more"></a>
<h3 id="ALGORITHM-Euclid-m-n"><a href="#ALGORITHM-Euclid-m-n" class="headerlink" title="ALGORITHM Euclid(m, n)"></a>ALGORITHM Euclid(m, n)</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//Computes gcd(m, n) by Euclid’s algorithm</div><div class="line">//Input: Two nonnegative,<span class="built_in"> not-both-zero </span>integers m<span class="built_in"> and </span>n</div><div class="line">//Output: Greatest common divisor of m<span class="built_in"> and </span>n</div><div class="line">while n = 0 do</div><div class="line">  r ← m mod n</div><div class="line">  m ← n</div><div class="line">  n ← r<span class="built_in"></span></div><div class="line">return m</div></pre></td></tr></table></figure>
<p>In javascript this would look like this. We can make use of an implicit return and ternary function to have a one-liner.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">m, n</span>) =&gt;</span> (n &gt; <span class="number">0</span> ? gcd(n, m % n) : m);</div><div class="line"><span class="built_in">console</span>.log(gcd(process.argv[<span class="number">2</span>], process.argv[<span class="number">3</span>]));</div></pre></td></tr></table></figure>
<p>Testing the output it appears to work.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node gcd.js 60 24</span></div><div class="line">12</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="ALGORITHM-Sieve-n"><a href="#ALGORITHM-Sieve-n" class="headerlink" title="ALGORITHM Sieve(n)"></a>ALGORITHM Sieve(n)</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Implements <span class="keyword">the</span> sieve <span class="keyword">of</span> Eratosthenes<span class="comment"></span></div><div class="line">//Input: A positive integer n &gt; 1<span class="comment"></span></div><div class="line">//Output: Array L of all prime numbers less than or equal to n</div><div class="line"><span class="number">1.1</span> What Is <span class="keyword">an</span> Algorithm? <span class="number">7</span></div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> n <span class="built_in">do</span> A[p] ← p</div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> √n <span class="built_in">do</span><span class="comment"> //see note before pseudocode</span></div><div class="line">  <span class="keyword">if</span> A[p] = <span class="number">0</span><span class="comment"> //p hasn’t been eliminated on previous passes</span></div><div class="line">    j ← p ∗ p</div><div class="line">    <span class="keyword">while</span> j ≤ n <span class="built_in">do</span></div><div class="line">      A[j] ← <span class="number">0</span><span class="comment"> //mark element as eliminated</span></div><div class="line">      j ← j + p<span class="comment"></span></div><div class="line">//copy the remaining elements of A to array L of the primes</div><div class="line">i ← <span class="number">0</span></div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> n <span class="built_in">do</span></div><div class="line">  <span class="keyword">if</span> A[p] = <span class="number">0</span></div><div class="line">    L[i]← A[p]</div><div class="line">    i ← i + <span class="number">1</span></div><div class="line"><span class="literal">return</span> L</div></pre></td></tr></table></figure>
<p>If I was trying to create a function to find primes, I would like to do this differently (say with a linked list), but I wanted to implement the example exactly. I also ignored the section at the end to copy the array to a new array L because it isn’t necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sieve = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> array = [];</div><div class="line">  <span class="keyword">const</span> limit = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(n));</div><div class="line">  <span class="keyword">const</span> iterations = &#123;</div><div class="line">    <span class="attr">outerLoop</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">innerLoop</span>: <span class="number">0</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">let</span> j, p;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (p = <span class="number">2</span>; p &lt;= n; p++) array[p] = p;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (p = <span class="number">2</span>; p &lt;= limit; p++) &#123;</div><div class="line">    iterations.outerLoop++;</div><div class="line">    <span class="keyword">if</span> (array[p]) &#123;</div><div class="line">      j = p * p;</div><div class="line">      <span class="keyword">while</span> (j &lt;= n) &#123;</div><div class="line">        iterations.innerLoop++;</div><div class="line">        array[j] = <span class="number">0</span>;</div><div class="line">        j += p;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(iterations);</div><div class="line">  <span class="keyword">return</span> array.filter(<span class="function"><span class="params">value</span> =&gt;</span> value);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sieve(process.argv[<span class="number">2</span>]).join(<span class="string">", "</span>));</div></pre></td></tr></table></figure>
<p>And it appears to work. Fantastic :)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node sieve.js 100</span></div><div class="line">&#123; outerLoop: 9, innerLoop: 104 &#125;</div><div class="line">2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Quiz 1]]></title>
      <url>/2017/07/30/ISYS1126/ISYS1126-Quiz-1/</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<a id="more"></a>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li>Which of the following PHP methods issues a warning upon encountering an error? <strong>include</strong></li>
<li>Which of the following PHP methods terminates upon encountering an error? <strong>require</strong></li>
<li>Which of the following promotes code reuse? <strong>trait</strong></li>
<li>It is possible to instantiate a trait. <strong>false</strong></li>
<li>In PHP, it is possible to create a static variable. <strong>true</strong></li>
<li><strong>Scope resolution</strong> operator is used to call a static method via Class name in PHP.</li>
<li>In PHP, the pseudo-variable <strong>$this</strong> is available when a method is called from within an object context.</li>
<li>In PHP, the <strong>-&gt;</strong> operator is used to call class methods via object(s).</li>
<li>In PHP a constructor is defined with the keyword <strong>__construct</strong></li>
<li><strong>Protected</strong> in PHP makes sure that the class member is accessible via derived class.</li>
<li><strong>Final</strong> keyword prevents the overriding of a method in the child class.</li>
</ul>
<h3 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h3><ul>
<li>An <strong>interface</strong> is a supertype that specifies method headers without implementations.</li>
<li>In <strong>singleton</strong> pattern, a class has one instance, It provides a global access point to it.</li>
<li><strong>Strategy</strong> pattern makes a family algorithm and encapsulates each algorithm.</li>
<li>Proxy pattern makes a family algorithm and encapsulates each algorithm. <strong>false</strong></li>
</ul>
<h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul>
<li><strong>Composer</strong> is a dependency manager used by Laravel.</li>
<li>Laravel uses <strong>MVC</strong> approach.</li>
<li>Which of the following ORM is shipped with Laravel? <strong>Eloquent</strong></li>
<li>In a laravel project, route file is called as <strong>web.php</strong>.</li>
<li>In Laravel, routes use a special type of syntax known as <strong>closure</strong>.</li>
<li>In Laravel route file is located <strong>insides routes/directory</strong>.</li>
<li>In laravel, view files are written in <strong>blade</strong> syntax.</li>
<li>In Laravel, a model file will be written as <strong>php</strong> code.</li>
</ul>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ul>
<li>jQuery is a framework/library. <strong>true</strong></li>
<li>jQuery is a client-side framework. <strong>true</strong></li>
<li>In jQuery <strong>$</strong> is used to select an HTML element, attribute, class or an id.</li>
<li>The jQuery declaration $(“p.test”).hide( ) will <strong>hide only the paragraphs that have a class = “test”</strong>.</li>
</ul>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li>Which of the following frameworks is not open-source? <strong>ASP.NET</strong></li>
<li>Which of the following can be described as a technique that lets a developer query and manipulate data from a database using an object-oriented paradigm? <strong>ORM</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQuery-like DOM Selector]]></title>
      <url>/2017/07/27/JQuery-like%20DOM%20Selector/</url>
      <content type="html"><![CDATA[<p>I was watching a Play-by-Play video with Lea Verou on Pluralsight and she used to following function to create JQuery like syntax to select DOM nodes. I thought it was good enough to share.</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector, container</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (container || <span class="built_in">document</span>).querySelector(selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now I can attach event listeners to an DOM node in the following format;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'button.foo'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Pretty cool.</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Passport.js Simple Example]]></title>
      <url>/2017/07/02/Passport-js-Simple-Example/</url>
      <content type="html"><![CDATA[<p>This is a simple example to demonstrate <a href="http://passportjs.org/" target="_blank" rel="external">Passport.js</a> using a basic local strategy.</p>
<a id="more"></a>
<h2 id="Create-new-project"><a href="#Create-new-project" class="headerlink" title="Create new project"></a>Create new project</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i -S express passport passport-http mocha</div><div class="line">touch server.js test.js</div><div class="line">npm init -y</div></pre></td></tr></table></figure>
<h2 id="Create-Server-boilerplate"><a href="#Create-Server-boilerplate" class="headerlink" title="Create Server boilerplate"></a>Create Server boilerplate</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">"passport"</span>);</div><div class="line"><span class="keyword">const</span> BasicStrategy = <span class="built_in">require</span>(<span class="string">"passport-http"</span>).BasicStrategy;</div><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">"express"</span>)();</div><div class="line"></div><div class="line">passport.use(</div><div class="line">  <span class="keyword">new</span> BasicStrategy(<span class="function">(<span class="params">userid, password, done</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Replace with database check</span></div><div class="line">    <span class="keyword">if</span> (userid !== <span class="string">"foo"</span> || password !== <span class="string">"bar"</span>) &#123;</div><div class="line">      <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, &#123; <span class="attr">username</span>: <span class="string">"Foobar"</span> &#125;);</div><div class="line">  &#125;)</div><div class="line">);</div><div class="line"></div><div class="line">app.get(<span class="string">"/"</span>, passport.authenticate(<span class="string">"basic"</span>, &#123; <span class="attr">session</span>: <span class="literal">false</span> &#125;), (req, res) =&gt; &#123;</div><div class="line">  res.send(req.user);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"listening"</span>) &#125;);</div></pre></td></tr></table></figure>
<h2 id="Build-our-test-cases"><a href="#Build-our-test-cases" class="headerlink" title="Build our test cases"></a>Build our test cases</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test.js</span></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">"assert"</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line">describe(<span class="string">"Test"</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">"should reject no username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(<span class="string">"http://localhost:8080"</span>, res =&gt; &#123;</div><div class="line">      assert.equal(<span class="number">401</span>, res.statusCode);</div><div class="line">      done();</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">"should reject incorrect username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(</div><div class="line">      &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">        <span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">        <span class="attr">auth</span>: <span class="string">"foo:foo"</span></div><div class="line">      &#125;,</div><div class="line">      res =&gt; &#123;</div><div class="line">        assert.equal(<span class="number">401</span>, res.statusCode);</div><div class="line">        done();</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">"should accept correct username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(</div><div class="line">      &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">        <span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">        <span class="attr">auth</span>: <span class="string">"foo:bar"</span></div><div class="line">      &#125;,</div><div class="line">      res =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> json = &#123;&#125;;</div><div class="line">        <span class="keyword">let</span> data = <span class="string">""</span>;</div><div class="line">        res.on(<span class="string">"data"</span>, chunk =&gt; &#123; data += chunk &#125;);</div><div class="line">        res.on(<span class="string">"end"</span>, () =&gt; &#123;</div><div class="line">          json = <span class="built_in">JSON</span>.parse(data);</div><div class="line">          assert.equal(<span class="number">200</span>, res.statusCode);</div><div class="line">          assert.equal(<span class="string">"Foobar"</span>, json.username);</div><div class="line">          done();</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Start-server"><a href="#Start-server" class="headerlink" title="Start server"></a>Start server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<h2 id="Test-requests"><a href="#Test-requests" class="headerlink" title="Test requests"></a>Test requests</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">test</span></div><div class="line">Test</div><div class="line">  √ should reject no username/password</div><div class="line">  √ should reject incorrect username/password</div><div class="line">  √ should accept correct username/password</div><div class="line">$ curl localhost:8080</div><div class="line">Unauthorized</div><div class="line">$ curl localhost:8080 --user foo:bar</div><div class="line">&#123;<span class="string">"username"</span>:<span class="string">"Foobar"</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Next…"><a href="#Next…" class="headerlink" title="Next…"></a>Next…</h2><p>Go back to the TODO in BasicStrategy and replace with database call.<br>Also don’t forget that you can dump the header with <code>curl -D - localhost:8080 --user foo:bar</code></p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> password.js </tag>
            
            <tag> express </tag>
            
            <tag> mocha </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Hexagonal Solutions]]></title>
      <url>/2017/06/25/Regex%20Crossword/Regex-Crossword-Hexagonal-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Buzz-Buzz"><a href="#Buzz-Buzz" class="headerlink" title="Buzz Buzz"></a>Buzz Buzz</h2><p>Hive<br><img src="/images/regex/hex1.JPG" alt=""></p>
<h2 id="Garden"><a href="#Garden" class="headerlink" title="Garden"></a>Garden</h2><p>Flower<br><img src="/images/regex/hex2.JPG" alt=""></p>
<h2 id="Pollen"><a href="#Pollen" class="headerlink" title="Pollen"></a>Pollen</h2><p>Birds and Bees<br><img src="/images/regex/hex3.JPG" alt=""></p>
<h2 id="Stationary"><a href="#Stationary" class="headerlink" title="Stationary"></a>Stationary</h2><p>Bee = Move Very Fast To Stay Still<br><img src="/images/regex/hex4.JPG" alt=""></p>
<h2 id="Winnie"><a href="#Winnie" class="headerlink" title="Winnie"></a>Winnie</h2><p>I’ve been thinking these are the wrong sort of bees<br><img src="/images/regex/hex5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Player Puzzle Solutions]]></title>
      <url>/2017/06/25/Regex%20Crossword/Regex-Crossword-Player-Puzzle-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Binary-by-Player-6450"><a href="#Binary-by-Player-6450" class="headerlink" title="Binary (by Player #6450)"></a>Binary (by Player #6450)</h2><p><img src="/images/regex/player1.JPG" alt=""></p>
<h2 id="Single-Cell-Organism-by-Player-20428"><a href="#Single-Cell-Organism-by-Player-20428" class="headerlink" title="Single Cell Organism (by Player #20428)"></a>Single Cell Organism (by Player #20428)</h2><p><img src="/images/regex/player2.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How well do you know Node.js?]]></title>
      <url>/2017/06/25/How-well-do-you-know-Node-js/</url>
      <content type="html"><![CDATA[<p><a href="https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8" target="_blank" rel="external">Here is the quiz</a>. The lesson is, read the <a href="https://nodejs.org/en/docs/" target="_blank" rel="external">documentation</a>.</p>
<a id="more"></a>
<hr>
<h3 id="How-come-when-you-declare-a-global-variable-in-any-Node-js-file-it’s-not-really-global-to-all-modules"><a href="#How-come-when-you-declare-a-global-variable-in-any-Node-js-file-it’s-not-really-global-to-all-modules" class="headerlink" title="How come when you declare a global variable in any Node.js file it’s not really global to all modules?"></a>How come when you declare a global variable in any Node.js file it’s not really global to all modules?</h3><p>Node wraps any required code in the below function. The idea is to keep each module in its own sandbox. These is a way to do globals, by <code>global.foo = 5</code>, but it’s not recommended practice.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line">  <span class="comment">// module code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/globals.html#globals_global_objects" target="_blank" rel="external">Node Docs on globals</a></li>
<li><a href="https://nodejs.org/api/modules.html#modules_the_module_wrapper" target="_blank" rel="external">Node Docs on the module wrapper</a></li>
</ul>
<hr>
<h3 id="When-exporting-the-API-of-a-Node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports"><a href="#When-exporting-the-API-of-a-Node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports" class="headerlink" title="When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?"></a>When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?</h3><p>exports is initially just an alias for module.exports. So if you write <code>exports.foo = &#39;bar&#39;</code>, it is actually <code>module.exports = { foo: &#39;bar&#39;}</code>. However if you want to export a function or an object instead of just key-value pairs, you can override the exports alias. So using <code>module.exports = function foo() {}</code> will cause exports and module.exports to no longer reference the same object.</p>
<hr>
<h3 id="Can-we-require-local-files-without-using-relative-paths"><a href="#Can-we-require-local-files-without-using-relative-paths" class="headerlink" title="Can we require local files without using relative paths?"></a>Can we require local files without using relative paths?</h3><p>Lots of different ways. This is probably the simplest.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">global.__base = __dirname + <span class="string">'/'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bar/whatever.js</span></div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(__base + <span class="string">'foo/whatever'</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://gist.github.com/branneman/8048520" target="_blank" rel="external">Gist with different options</a></li>
</ul>
<hr>
<h3 id="What-is-the-Event-Loop-Is-it-part-of-V8"><a href="#What-is-the-Event-Loop-Is-it-part-of-V8" class="headerlink" title="What is the Event Loop? Is it part of V8?"></a>What is the Event Loop? Is it part of V8?</h3><p>It is Node’s method of implementing event-driven programming. A piece of code subscribes to an event, and registers a callback to fire when that event is emitted. It isn’t part of V8, it is part of libuv and runs on a different thread.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foo.js</span></div><div class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    self.emit(<span class="string">'event'</span>, <span class="string">'foo!'</span>)</div><div class="line">  &#125;, <span class="number">2000</span>)</div><div class="line">&#125;;</div><div class="line">util.inherits(Foo, EventEmitter);</div><div class="line"><span class="built_in">module</span>.exports = Foo;</div><div class="line"></div><div class="line"><span class="comment">// bar.js</span></div><div class="line"><span class="keyword">const</span> Foo = <span class="built_in">require</span>(<span class="string">'./foo.js'</span>)</div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo()</div><div class="line">foo.on(<span class="string">'event'</span>, (message) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(message)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="external">Node docs on the event Loop</a></li>
</ul>
<hr>
<h3 id="What-is-the-Call-Stack-Is-it-part-of-V8"><a href="#What-is-the-Call-Stack-Is-it-part-of-V8" class="headerlink" title="What is the Call Stack? Is it part of V8?"></a>What is the Call Stack? Is it part of V8?</h3><p>It is a list of functions that are to be processed in FILO order. It is a part of V8.</p>
<hr>
<h3 id="What-is-the-difference-between-setImmediate-and-process-nextTick"><a href="#What-is-the-difference-between-setImmediate-and-process-nextTick" class="headerlink" title="What is the difference between setImmediate and process.nextTick?"></a>What is the difference between setImmediate and process.nextTick?</h3><p><code>setImmediate</code> puts the callback at the end of the event queue, so it will be processed after the current poll phase completes (during the check phase).</p>
<p><code>process.nextTick</code> puts the callback at the beginning of the event queue, so it will be processed after the current operation, regardless of the current phase of the event loop.</p>
<ul>
<li><a href="https://nodejs.org/api/timers.html#timers_scheduling_timers" target="_blank" rel="external">Node Docs on Times</a></li>
</ul>
<hr>
<h3 id="How-do-you-make-an-asynchronous-function-return-a-value"><a href="#How-do-you-make-an-asynchronous-function-return-a-value" class="headerlink" title="How do you make an asynchronous function return a value?"></a>How do you make an asynchronous function return a value?</h3><p>Return the value as part of resolving a promise.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; resolve(<span class="string">'bar'</span>) &#125;, <span class="number">2000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> foo()</div><div class="line">  <span class="built_in">console</span>.log(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://ponyfoo.com/articles/understanding-javascript-async-await" target="_blank" rel="external">Ponyfoo article on async/await with promises</a></li>
</ul>
<hr>
<h3 id="Can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other"><a href="#Can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other" class="headerlink" title="Can callbacks be used with promises or is it one way or the other?"></a>Can callbacks be used with promises or is it one way or the other?</h3><p>You can use both. I like the below pattern.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (callback) &#123;</div><div class="line">    callback()</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span> <span class="comment">// Or something else</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// whatever</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="What-are-the-major-differences-between-spawn-exec-and-fork"><a href="#What-are-the-major-differences-between-spawn-exec-and-fork" class="headerlink" title="What are the major differences between spawn, exec, and fork?"></a>What are the major differences between spawn, exec, and fork?</h3><p>spawn will ‘spawn’ a shell, execute a command within that shell and stream back the process output to the parent.</p>
<p>exec works the same as spawn except that its buffers the process output. Better suited for simple tasks.</p>
<p>fork starts a new Node process, with parent and child communicating through events. This is not the same as forking on Linux.</p>
<ul>
<li><a href="https://nodejs.org/api/child_process.html#child_process_child_process" target="_blank" rel="external">Node Docs on child processes</a></li>
</ul>
<hr>
<h3 id="How-does-the-cluster-module-work-How-is-it-different-than-using-a-load-balancer"><a href="#How-does-the-cluster-module-work-How-is-it-different-than-using-a-load-balancer" class="headerlink" title="How does the cluster module work? How is it different than using a load balancer?"></a>How does the cluster module work? How is it different than using a load balancer?</h3><p>The cluster module forks multiple child processes. When the parent process receives a task, such as a http request, it chooses a child process to be responsible for that task. The difference between clustering and load balancing is that load balancing is done to distribute connections across multiple hosts, whereas clustering is done a single host.</p>
<ul>
<li><a href="https://nodejs.org/api/cluster.html#cluster_how_it_works" target="_blank" rel="external">Node Docs on the cluster module</a></li>
</ul>
<hr>
<h3 id="What-are-the-–harmony-flags"><a href="#What-are-the-–harmony-flags" class="headerlink" title="What are the –harmony-* flags?"></a>What are the –harmony-* flags?</h3><p>Enables a staged V8 feature. This is a feature the V8 team has implemented but isn’t on by default due to it being almost but not yet complete. Use <code>node --v8-options | grep &quot;in progress&quot;</code> to list them.</p>
<hr>
<h3 id="How-can-you-read-and-inspect-the-memory-usage-of-a-Node-js-process"><a href="#How-can-you-read-and-inspect-the-memory-usage-of-a-Node-js-process" class="headerlink" title="How can you read and inspect the memory usage of a Node.js process?"></a>How can you read and inspect the memory usage of a Node.js process?</h3><p>Yes, either with any process manager outside Node, or using <code>process.memoryUsage()</code> inside Node.</p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_process_memoryusage" target="_blank" rel="external">Node Docs on process.memoryUsage()</a></li>
</ul>
<hr>
<h3 id="Can-reverse-search-in-commands-history-be-used-inside-Node’s-REPL"><a href="#Can-reverse-search-in-commands-history-be-used-inside-Node’s-REPL" class="headerlink" title="Can reverse-search in commands history be used inside Node’s REPL?"></a>Can reverse-search in commands history be used inside Node’s REPL?</h3><p>Not on Windows (as far as I know). On Linux, you install <a href="https://github.com/hanslub42/rlwrap" target="_blank" rel="external">rlwrap</a>, then run Node REPL as <code>NODE_NO_READLINE=1 rlwrap node</code>. Honestly not worth the effort.</p>
<hr>
<h3 id="What-are-V8-object-and-function-templates"><a href="#What-are-V8-object-and-function-templates" class="headerlink" title="What are V8 object and function templates?"></a>What are V8 object and function templates?</h3><p>Function templates are blueprints for a single Javascript function. This is how you embed Javascript in a native C++ environment.</p>
<p>Object templates are associated with function templates. They configure the objects that are created by the function template.</p>
<ul>
<li><a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide#templates" target="_blank" rel="external">V8 Wiki on templates</a></li>
</ul>
<hr>
<h3 id="What-is-libuv-and-how-does-Node-js-use-it"><a href="#What-is-libuv-and-how-does-Node-js-use-it" class="headerlink" title="What is libuv and how does Node.js use it?"></a>What is libuv and how does Node.js use it?</h3><p>Node uses libuv to abstract the non-blocking I/O operations, so Node can be cross platform. It handles file system operations, TCP/UDP sockets, child processes etc. It is what provides Node with the Event loop.</p>
<hr>
<h3 id="How-can-you-make-Node’s-REPL-always-use-JavaScript-strict-mode"><a href="#How-can-you-make-Node’s-REPL-always-use-JavaScript-strict-mode" class="headerlink" title="How can you make Node’s REPL always use JavaScript strict mode?"></a>How can you make Node’s REPL always use JavaScript strict mode?</h3><p>Globally you can always use <code>alias node=node --use_strict</code>, otherwise you can define your own repl.js such that;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> repl = <span class="built_in">require</span>(<span class="string">'repl'</span>);</div><div class="line"><span class="keyword">const</span> r = repl.start(&#123;</div><div class="line">  <span class="attr">replMode</span>: repl.REPL_MODE_STRICT</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="How-can-we-do-one-final-operation-before-a-Node-process-exits-Can-that-operation-be-done-asynchronously"><a href="#How-can-we-do-one-final-operation-before-a-Node-process-exits-Can-that-operation-be-done-asynchronously" class="headerlink" title="How can we do one final operation before a Node process exits? Can that operation be done asynchronously?"></a>How can we do one final operation before a Node process exits? Can that operation be done asynchronously?</h3><p>You can register a function for the exit event, but its synchronous. If you need your function to be asynchronous, use the beforeExit event like so;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; resolve(<span class="string">'bar'</span>) &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> foo();</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">&#125;</div><div class="line"></div><div class="line">process.once(<span class="string">"beforeExit"</span>, bar);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_event_beforeexit" target="_blank" rel="external">Node Docs on beforeExit event</a></li>
</ul>
<hr>
<h3 id="Besides-V8-and-libuv-what-other-external-dependencies-does-Node-have"><a href="#Besides-V8-and-libuv-what-other-external-dependencies-does-Node-have" class="headerlink" title="Besides V8 and libuv, what other external dependencies does Node have?"></a>Besides V8 and libuv, what other external dependencies does Node have?</h3><ol>
<li>http-parser - used parsing HTTP requests and responses.</li>
<li>c-ares - used for asynchronous DNS queries</li>
<li>OpenSSL - used for crypto functions</li>
<li>zlib - used for asynchronous compression and decompression</li>
</ol>
<ul>
<li><a href="https://nodejs.org/en/docs/meta/topics/dependencies/0" target="_blank" rel="external">Node Docs on dependencies</a></li>
</ul>
<hr>
<h3 id="What’s-the-problem-with-the-process-uncaughtException-event-How-is-it-different-than-the-exit-event"><a href="#What’s-the-problem-with-the-process-uncaughtException-event-How-is-it-different-than-the-exit-event" class="headerlink" title="What’s the problem with the process uncaughtException event? How is it different than the exit event?"></a>What’s the problem with the process uncaughtException event? How is it different than the exit event?</h3><p>On uncaughtException event, Node will default to printing the stack trace and exiting. If we register an event handler on the uncaughtException event, Node will not exit. Your event will in effect override the default. So you can produce some unexpected behaviour. Using this event is usually a sign that someone is using the wrong approach or isn’t handling their errors in the appropriate section of their program.</p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_event_uncaughtexception" target="_blank" rel="external">Node Docs on uncaughtException event</a></li>
</ul>
<hr>
<h3 id="Do-Node-buffers-use-V8-memory-Can-they-be-resized"><a href="#Do-Node-buffers-use-V8-memory-Can-they-be-resized" class="headerlink" title="Do Node buffers use V8 memory? Can they be resized?"></a>Do Node buffers use V8 memory? Can they be resized?</h3><p>No, they do not use V8 memory and they cannot be resized.</p>
<blockquote>
<p>Instances of the Buffer class are similar to arrays of integers but correspond to fixed-sized, raw memory allocations outside the V8 heap.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/buffer.html#buffer_buffer" target="_blank" rel="external">Node Docs on buffers</a></li>
</ul>
<hr>
<h3 id="What’s-the-difference-between-Buffer-alloc-and-Buffer-allocUnsafe"><a href="#What’s-the-difference-between-Buffer-alloc-and-Buffer-allocUnsafe" class="headerlink" title="What’s the difference between Buffer.alloc and Buffer.allocUnsafe?"></a>What’s the difference between Buffer.alloc and Buffer.allocUnsafe?</h3><p><code>Buffer.alloc</code> allocates a memory chunk and goes through an initialization process of setting all the cells to zero, then returning this wrapped in a Node Buffer object.</p>
<p><code>Buffer.allocUnsafe</code> does the same steps except for the initialization process. The unsafe part is that this could leak sensitive user information. The reason for both is that there may be applications where the initialization process produces too much overhead.</p>
<hr>
<h3 id="How-is-the-slice-method-on-buffers-different-from-that-on-arrays"><a href="#How-is-the-slice-method-on-buffers-different-from-that-on-arrays" class="headerlink" title="How is the slice method on buffers different from that on arrays?"></a>How is the slice method on buffers different from that on arrays?</h3><ol>
<li>Calling slice on an array returns an array but does not mutate the existing array.</li>
<li>Calling splice on an array returns an array and mutates the existing array.</li>
<li>Calling slice on a buffer returns a reference to the same chunk of memory, but offset and cropped. Mutating the data in that reference will mutate the data in the original buffer.</li>
</ol>
<ul>
<li><a href="https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end" target="_blank" rel="external">Node Docs on Buffer slice</a></li>
</ul>
<hr>
<h3 id="What-is-the-string-decoder-module-useful-for-How-is-it-different-than-casting-buffers-to-string"><a href="#What-is-the-string-decoder-module-useful-for-How-is-it-different-than-casting-buffers-to-string" class="headerlink" title="What is the string_decoder module useful for? How is it different than casting buffers to string"></a>What is the string_decoder module useful for? How is it different than casting buffers to string</h3><p>It is useful for decoding Buffer objects into strings. You can just call <code>buffer.toString()</code>, but string_decoder handles multibyte UTF-8 and UTF-16 characters.**</p>
<ul>
<li><a href="https://nodejs.org/api/string_decoder.html#string_decoder_string_decoder" target="_blank" rel="external">Node Docs on string_decoder</a></li>
</ul>
<hr>
<h3 id="What-are-the-5-major-steps-that-the-require-function-does"><a href="#What-are-the-5-major-steps-that-the-require-function-does" class="headerlink" title="What are the 5 major steps that the require function does?"></a>What are the 5 major steps that the require function does?</h3><ol>
<li>Resolving - Find the module in the file system</li>
<li>Loading - Determine its filetype</li>
<li>Wrapping - Wrap the function in Node’s module wrapper, so it is private but appears global.</li>
<li>Evaluating - Actually process the code</li>
<li>Caching - Store a copy in memory for if required again.</li>
</ol>
<ul>
<li><a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="external">Samer Buna’s (quiz author) article on require</a></li>
</ul>
<hr>
<h3 id="What-is-the-require-resolve-function-and-what-is-it-useful-for"><a href="#What-is-the-require-resolve-function-and-what-is-it-useful-for" class="headerlink" title="What is the require.resolve function and what is it useful for?"></a>What is the require.resolve function and what is it useful for?</h3><p>It invokes only the resolve step in the require process. It is useful to verify that a module exists, possibly for some optional package. You can see where Node will look with <code>console.log(module.paths)</code>.</p>
<hr>
<h3 id="What-is-the-main-property-in-package-json-useful-for"><a href="#What-is-the-main-property-in-package-json-useful-for" class="headerlink" title="What is the main property in package.json useful for?"></a>What is the main property in package.json useful for?</h3><p>It indicates the entry point to the program. So when your package is require, your main module’s export object is return. NPM needs to know where to look for your main module.</p>
<ul>
<li><a href="https://docs.npmjs.com/files/package.json#main" target="_blank" rel="external">npm Docs on package.json</a></li>
</ul>
<hr>
<h3 id="What-are-circular-modular-dependencies-in-Node-and-how-can-they-be-avoided"><a href="#What-are-circular-modular-dependencies-in-Node-and-how-can-they-be-avoided" class="headerlink" title="What are circular modular dependencies in Node and how can they be avoided?"></a>What are circular modular dependencies in Node and how can they be avoided?</h3><p>Circular dependencies are when A requires B, while B requires A. There are can be many more packages inbetween A and B which makes the chain hard to recognize. They are avoided in Node by returning a unfinished exports object to B, thus breaking the loop. They are avoided in real-world scenarios by having a treelike structure to a codebase where there are clear parent-child relationships that do not flow back up the tree.</p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_cycles" target="_blank" rel="external">Node Docs on module cycles</a></li>
</ul>
<hr>
<h3 id="What-are-the-3-file-extensions-that-will-be-automatically-tried-by-the-require-function"><a href="#What-are-the-3-file-extensions-that-will-be-automatically-tried-by-the-require-function" class="headerlink" title="What are the 3 file extensions that will be automatically tried by the require function?"></a>What are the 3 file extensions that will be automatically tried by the require function?</h3><p>.js, .json and .node in that order.</p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_file_modules" target="_blank" rel="external">Node Docs on File Modules</a></li>
</ul>
<hr>
<h3 id="When-creating-an-http-server-and-writing-a-response-for-a-request-why-is-the-end-function-required"><a href="#When-creating-an-http-server-and-writing-a-response-for-a-request-why-is-the-end-function-required" class="headerlink" title="When creating an http server and writing a response for a request, why is the end() function required?"></a>When creating an http server and writing a response for a request, why is the end() function required?</h3><p>Because the response object is a stream. Therefore we need to indicate to the receiver that we have finished writing data.</p>
<hr>
<h3 id="When-is-it-ok-to-use-the-file-system-Sync-methods"><a href="#When-is-it-ok-to-use-the-file-system-Sync-methods" class="headerlink" title="When is it ok to use the file system *Sync methods?"></a>When is it ok to use the file system *Sync methods?</h3><p>In applications where blocking is appropriate. For example, a CLI tool that performs synchronous operations would be appropriate. A web server that is handling multiple concurrent clients would not.</p>
<hr>
<h3 id="How-can-you-print-only-one-level-of-a-deeply-nested-object"><a href="#How-can-you-print-only-one-level-of-a-deeply-nested-object" class="headerlink" title="How can you print only one level of a deeply nested object?"></a>How can you print only one level of a deeply nested object?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">util.inspect(foo, &#123; <span class="attr">depth</span>: <span class="number">0</span> &#125;)</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://nodejs.org/api/util.html#util_util_inspect_object_options" target="_blank" rel="external">Node Docs on util.inspect</a></li>
</ul>
<hr>
<h3 id="What-is-the-node-gyp-package-used-for"><a href="#What-is-the-node-gyp-package-used-for" class="headerlink" title="What is the node-gyp package used for?"></a>What is the node-gyp package used for?</h3><p>gyp is a ‘meta-build system’. It generates other build systems. This enables cross platform support. Node uses gyp as node-gyp to compile addon modules as native.</p>
<hr>
<h3 id="The-objects-exports-require-and-module-are-all-globally-available-in-every-module-but-they-are-different-in-every-module-How"><a href="#The-objects-exports-require-and-module-are-all-globally-available-in-every-module-but-they-are-different-in-every-module-How" class="headerlink" title="The objects exports, require, and module are all globally available in every module but they are different in every module. How?"></a>The objects exports, require, and module are all globally available in every module but they are different in every module. How?</h3><p>Node wraps each module in the function below. So, exports, require and module appear to the module as global variables but actually they are module-specific.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line"><span class="comment">// Module code actually lives in here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_the_module_wrapper" target="_blank" rel="external">Node Docs on the module wrapper</a></li>
</ul>
<hr>
<h3 id="How-can-a-module-be-both-requirable-by-other-modules-and-executable-directly-using-the-node-command"><a href="#How-can-a-module-be-both-requirable-by-other-modules-and-executable-directly-using-the-node-command" class="headerlink" title="How can a module be both requirable by other modules and executable directly using the node command?"></a>How can a module be both requirable by other modules and executable directly using the node command?</h3><p>Using the following conditional.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</div><div class="line">  <span class="comment">// Executed directly</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// Required</span></div><div class="line">  <span class="built_in">module</span>.exports = foo</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_accessing_the_main_module" target="_blank" rel="external">Node Docs on accessing the main module</a></li>
</ul>
<hr>
<h3 id="What’s-an-example-of-a-built-in-stream-in-Node-that-is-both-readable-and-writable"><a href="#What’s-an-example-of-a-built-in-stream-in-Node-that-is-both-readable-and-writable" class="headerlink" title="What’s an example of a built-in stream in Node that is both readable and writable?"></a>What’s an example of a built-in stream in Node that is both readable and writable?</h3><blockquote>
<p>A net.Socket is also a duplex stream, so it can be both readable and writable, and it is also a EventEmitter.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket" target="_blank" rel="external">Node docs on net module</a></li>
</ul>
<hr>
<h3 id="What’s-the-difference-between-using-event-emitters-and-using-simple-callback-functions-to-allow-for-asynchronous-handling-of-code"><a href="#What’s-the-difference-between-using-event-emitters-and-using-simple-callback-functions-to-allow-for-asynchronous-handling-of-code" class="headerlink" title="What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?"></a>What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?</h3><p>There are a few. The code being executed remains with the client code rather than being handed over, which has all sorts of implications if a variable needs to be changed. I suppose the most notably difference is multiple clients can subscribe to an event easily and all operate independently. To implement the same thing using a callback structure would be quite cumbersome, you’d have to store an array of callbacks. On the other hand, simple callback functions are just that, simple, and which makes events overkill for a whole bunch of usecases.</p>
<hr>
<h3 id="The-require-function-always-caches-the-module-it-requires-What-can-you-do-if-you-need-to-execute-the-code-in-a-required-module-many-times"><a href="#The-require-function-always-caches-the-module-it-requires-What-can-you-do-if-you-need-to-execute-the-code-in-a-required-module-many-times" class="headerlink" title="The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?"></a>The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'foo'</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./module.js'</span>)()</div></pre></td></tr></table></figure>
<hr>
<h3 id="What’s-the-difference-between-the-Paused-and-the-Flowing-modes-of-readable-streams"><a href="#What’s-the-difference-between-the-Paused-and-the-Flowing-modes-of-readable-streams" class="headerlink" title="What’s the difference between the Paused and the Flowing modes of readable streams?"></a>What’s the difference between the Paused and the Flowing modes of readable streams?</h3><blockquote>
<p>When in flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface.</p>
<p>In paused mode, the stream.read() method must be called explicitly to read chunks of data from the stream.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/stream.html#stream_two_modes" target="_blank" rel="external">Node docs on streams</a></li>
</ul>
<hr>
<h3 id="What-does-the-–inspect-argument-do-for-the-node-command"><a href="#What-does-the-–inspect-argument-do-for-the-node-command" class="headerlink" title="What does the –inspect argument do for the node command?"></a>What does the –inspect argument do for the node command?</h3><p>Attaches Chrome DevTools to the Node instance for debugging purposes. You also probably want to use the –debug-brk option to have it break on first line.</p>
<hr>
<h3 id="When-working-with-streams-when-do-you-use-the-pipe-function-and-when-do-you-use-events-Can-those-two-methods-be-combined"><a href="#When-working-with-streams-when-do-you-use-the-pipe-function-and-when-do-you-use-events-Can-those-two-methods-be-combined" class="headerlink" title="When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?"></a>When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?</h3><p>Piping is used when you want to connect a readable stream to a writable stream and don’t need to worry about chunks. If you did want to manually handle chunks (for example if you were displaying a progress bar), then you would need to use events. And they can be combined like so;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">'./foo.js'</span>)</div><div class="line">rs.pipe(process.stdout)</div><div class="line">rs.on(<span class="string">'end'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'end'</span>) &#125;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Hamlet Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Hamlet-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="The-Ghost"><a href="#The-Ghost" class="headerlink" title="The Ghost"></a>The Ghost</h2><p>Revenge his most foul and unnatural murder<br><img src="/images/regex/hamlet1.JPG" alt=""></p>
<h2 id="Hamlet-and-Ophelia"><a href="#Hamlet-and-Ophelia" class="headerlink" title="Hamlet and Ophelia"></a>Hamlet and Ophelia</h2><p>To be, or not to be, that is the question<br><img src="/images/regex/hamlet2.JPG" alt=""></p>
<h2 id="The-Play"><a href="#The-Play" class="headerlink" title="The Play"></a>The Play</h2><p>He poisons him i’ the garden<br><img src="/images/regex/hamlet3.JPG" alt=""></p>
<h2 id="Laertes"><a href="#Laertes" class="headerlink" title="Laertes"></a>Laertes</h2><p>Too much of water has thou, poor Ophelia!<br><img src="/images/regex/hamlet4.JPG" alt=""></p>
<h2 id="Memento"><a href="#Memento" class="headerlink" title="Memento"></a>Memento</h2><p>Alas, poor Yorick! … A fellow of infinite jest<br><img src="/images/regex/hamlet5.JPG" alt=""></p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>Now cracks a noble heart. Good night, sweet prince<br><img src="/images/regex/hamlet6.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Volapük Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Volapuk-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Bal"><a href="#Bal" class="headerlink" title="Bal"></a>Bal</h2><p><img src="/images/regex/vola1.JPG" alt=""></p>
<h2 id="Tel"><a href="#Tel" class="headerlink" title="Tel"></a>Tel</h2><p>Omg that is cheeky.<br><img src="/images/regex/vola2.JPG" alt=""></p>
<h2 id="Kil"><a href="#Kil" class="headerlink" title="Kil"></a>Kil</h2><p><img src="/images/regex/vola3.JPG" alt=""></p>
<h2 id="Fol"><a href="#Fol" class="headerlink" title="Fol"></a>Fol</h2><p><img src="/images/regex/vola4.JPG" alt=""></p>
<h2 id="Lul"><a href="#Lul" class="headerlink" title="Lul"></a>Lul</h2><p><img src="/images/regex/vola5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Cities Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Cities-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Pisco-Sour"><a href="#Pisco-Sour" class="headerlink" title="Pisco Sour"></a>Pisco Sour</h2><p>Lima<br><img src="/images/regex/cities1.JPG" alt=""></p>
<h2 id="Roman-Latin"><a href="#Roman-Latin" class="headerlink" title="Roman Latin"></a>Roman Latin</h2><p>Londinium<br><img src="/images/regex/cities2.JPG" alt=""></p>
<h2 id="Big-and-hot"><a href="#Big-and-hot" class="headerlink" title="Big and hot"></a>Big and hot</h2><p>New York<br><img src="/images/regex/cities3.JPG" alt=""></p>
<h2 id="Alpha-World-City"><a href="#Alpha-World-City" class="headerlink" title="Alpha World City"></a>Alpha World City</h2><p>Kuala Lumpur<br><img src="/images/regex/cities4.JPG" alt=""></p>
<h2 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h2><p>Copenhagen<br><img src="/images/regex/cities5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Double Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Double-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Telekinesis"><a href="#Telekinesis" class="headerlink" title="Telekinesis"></a>Telekinesis</h2><p>ET<br><img src="/images/regex/double1.JPG" alt=""></p>
<h2 id="GMC-Vandura"><a href="#GMC-Vandura" class="headerlink" title="GMC Vandura"></a>GMC Vandura</h2><p>A-Team<br><img src="/images/regex/double2.JPG" alt=""></p>
<h2 id="Bat-Man"><a href="#Bat-Man" class="headerlink" title="Bat Man"></a>Bat Man</h2><p>Nosferatu<br><img src="/images/regex/double3.JPG" alt=""></p>
<h2 id="Big-Mac"><a href="#Big-Mac" class="headerlink" title="Big Mac"></a>Big Mac</h2><p>Pulp Fiction<br><img src="/images/regex/double4.JPG" alt=""></p>
<h2 id="The-Lektor-Device"><a href="#The-Lektor-Device" class="headerlink" title="The Lektor Device"></a>The Lektor Device</h2><p>From Russia With Love<br><img src="/images/regex/double5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Palindromeda Solutions]]></title>
      <url>/2017/06/20/Regex%20Crossword/Regex-Crossword-Palindromeda-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Ten-o’clock"><a href="#Ten-o’clock" class="headerlink" title="Ten o’clock"></a>Ten o’clock</h2><p><img src="/images/regex/palin1.JPG" alt=""></p>
<h2 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h2><p><img src="/images/regex/palin2.JPG" alt=""></p>
<h2 id="Horn"><a href="#Horn" class="headerlink" title="Horn"></a>Horn</h2><p><img src="/images/regex/palin3.JPG" alt=""></p>
<h2 id="Open-the-lid"><a href="#Open-the-lid" class="headerlink" title="Open the lid"></a>Open the lid</h2><p><img src="/images/regex/palin4.JPG" alt=""></p>
<h2 id="Time-Walker"><a href="#Time-Walker" class="headerlink" title="Time Walker"></a>Time Walker</h2><p><img src="/images/regex/palin5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Experienced Solutions]]></title>
      <url>/2017/06/20/Regex%20Crossword/Regex-Crossword-Experienced-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Royal-Dinner"><a href="#Royal-Dinner" class="headerlink" title="Royal Dinner"></a>Royal Dinner</h2><p>Food fit for a king<br><img src="/images/regex/exp1.JPG" alt=""></p>
<h2 id="Regular-Workout"><a href="#Regular-Workout" class="headerlink" title="Regular Workout"></a>Regular Workout</h2><p>Regular expression of the day<br><img src="/images/regex/exp2.JPG" alt=""></p>
<h2 id="We-apologise-for-the-inconvenience"><a href="#We-apologise-for-the-inconvenience" class="headerlink" title="We apologise for the inconvenience"></a>We apologise for the inconvenience</h2><p>Answer the great question now<br><img src="/images/regex/exp3.JPG" alt=""></p>
<h2 id="Questionable"><a href="#Questionable" class="headerlink" title="Questionable"></a>Questionable</h2><p>Cross pattern<br><img src="/images/regex/exp4.JPG" alt=""></p>
<h2 id="Hamlet"><a href="#Hamlet" class="headerlink" title="Hamlet"></a>Hamlet</h2><p>To be or not to be a regular regx<br><img src="/images/regex/exp5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The 4-Hour Work Week]]></title>
      <url>/2017/06/19/The-4-Hour-Work-Week/</url>
      <content type="html"><![CDATA[<p>For more than a year, I have been meaning to read Tim Ferriss’s famous book which was semi-written for millennials. If you tend to read certain subreddits (<a href="http://www.reddit.com/r/financialindependance" target="_blank" rel="external">/r/financialindependance</a>, <a href="http://www.reddit.com/r/stoicism" target="_blank" rel="external">/r/stoicism</a>, etc) as I do then you will see his name come up on book recommendation threads. I also have friends who are into self improvement content, and they have been hounding me to read it so we can discuss it.</p>
<a id="more"></a>
<div class="bookcover"><br>  <img src="/images/bookcovers/The-4-Hour-Work-Week.jpg" height="185"><br></div>

<h2 id="Reactionary-attitude-towards-time-wasters"><a href="#Reactionary-attitude-towards-time-wasters" class="headerlink" title="Reactionary attitude towards time wasters"></a>Reactionary attitude towards time wasters</h2><p>His attitude towards time is clearly a result of having experienced being yet another small cog in yet another large corporate machine. He wants to work from home because he works faster without office disruptions. And who cares if you complete eight hours of work in one, because most of that eight is corporate paper pushing as an exercise in inefficiency. Therefore if you can work from home, you can get all your paper pushed as efficiently as possible.</p>
<p>When I’ve heard managers argue against working from home, it has been for this exact reason. That without a manager checking over their employees’ shoulders, an employee will produce the minimal threshold of work to fulfill the requirements. This creates an overhead of chasing up your employees which does not exist if I can see their computer screen from my desk. And time spent in the office is more than just work, but about building a team culture which produces a positive feedback loop on the output of the business.</p>
<p>You can see the clash between a collectivistic and individualistic attitude here. A collectivist attitude cares firstly about the business, and can even translate that into terms the individualist attitude can understand. “We are all in the same boat, sink or swim”. The issue Tim Ferriss is addressing is the individualist employee who has a complete view of this interaction and yet still wants to go kite surfing, the business be damned. Now where the reader stands on that will be reflected on their opinion of time theft.</p>
<h2 id="Hire-an-Indian"><a href="#Hire-an-Indian" class="headerlink" title="Hire an Indian"></a>Hire an Indian</h2><p>One of Tim’s main arguments is to automate huge chunks of your life. What about tasks that require a minimum level of human decision making? Hire an Indian. You can get a personal assistant, that understands English and how to use a computer for $4.50 per hour. For example, farming the contact details for a list of people who match certain criteria.</p>
<p>It reminds me of this craze in Silicon Valley where rich people pay young healthy people for blood transfusions because it will extend their lifespan. Which is a great example of the human fear of the inevitability of death. I remember learning about this when Hulk Hogan’s court case was a big deal because apparently Peter Thiel does this? Anyway, to the point. So if this blood is aging you, does the young healthy donor age faster? Then are you basically buying years from someone else’s life? For a book about not wasting your precious hours, how do you, the reader, feel about this?</p>
<p>Imagine you are in a pointless meeting, and you offer to pay your boss $50 to let you leave. Now imagine you skip the meeting, and pay an Indian to summarize the minutes of that meeting for $50. Ponder the differences. The business is the source of the inefficiency and you are taking advantage of how poor this third party is, to buy back the time the business is wasting.</p>
<p> And I totally get why. Trying to solve the underlying issue is going to be impossible. You’d be trying to change the work culture in your whole industry. You can do this to an extent, carve out a small pocket of sanity. This is what he does when he enforces a policy of doing business through emails. But that only goes so far, so you hire a personal assistant. And that makes total sense. But, man, just to start, its depressing as hell.</p>
<h2 id="The-book-is-part-of-the-argument"><a href="#The-book-is-part-of-the-argument" class="headerlink" title="The book is part of the argument"></a>The book is part of the argument</h2><p>In the book, Tim writes that one of the easiest ways to a four hour work week is to create a niche product that you can sell online, preferably digital. Then after you have built up the necessary platform and ad base, you can move to automating the process. Then you sit back, put your feet up, and enjoy profits roll in. For example, write a book.</p>
<p>In order for your book to sell, you need to become an “expert” on a topic. That comes from having validation from a respectable source, such as a certification body. Ok, so this is where the problem comes in. Is Tim Ferriss a respectable source for entrepreneurship advice? Yes. Because he started a successful supplement product line. He was validated by the free market.</p>
<p>So is the book, just another source of passive income for Tim? Could it be, that he got lucky, then realizing that he could claim it was part of a proven process, he could create a positive feedback loop. He writes a book, that at the most basic level is just saying “create sources of passive income”, of which the book is a passive source of income for him. He’s not lying, but what he is selling isn’t what you think it is.</p>
<p>Because you buy the book, assuming it is an instruction manual that you can use to duplicate his success. Which it could be. But you don’t know that, because it could equally be in the author’s interest to lie to you and sell you a book full of dreams. He wants people to think its possible, because then his passive income works and then it becomes possible. But only for him.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I had more thoughts, but this was about the amount that I wanted to write. I definitely gleaned some good advice, and I think I will keep my eyes open for niche markets in the next few years at university. But I also can see why he gets called a douchebag. Consider the following from the book.</p>
<blockquote>
<p>“Learn to be difficult when it counts. In school as in life, having a reputation for being assertive will help you receive preferential treatment without having to beg or fight for it every time.”</p>
<p>― <strong>Timothy Ferriss, The 4-Hour Workweek</strong></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Book Reviews </category>
            
        </categories>
        
        
        <tags>
            
            <tag> non-fiction </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Intermediate Solutions]]></title>
      <url>/2017/06/19/Regex%20Crossword/Regex-Crossword-Intermediate-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Always-remember"><a href="#Always-remember" class="headerlink" title="Always remember"></a>Always remember</h2><p>A towel<br><img src="/images/regex/int1.JPG" alt=""></p>
<h2 id="Johnny"><a href="#Johnny" class="headerlink" title="Johnny"></a>Johnny</h2><p>Walker<br><img src="/images/regex/int2.JPG" alt=""></p>
<h2 id="Earth"><a href="#Earth" class="headerlink" title="Earth"></a>Earth</h2><p>Forty-two<br><img src="/images/regex/int3.JPG" alt=""></p>
<h2 id="Encyclopedia"><a href="#Encyclopedia" class="headerlink" title="Encyclopedia"></a>Encyclopedia</h2><p>Dont panic<br><img src="/images/regex/int4.JPG" alt=""></p>
<h2 id="Technology"><a href="#Technology" class="headerlink" title="Technology"></a>Technology</h2><p>Turn off and on<br><img src="/images/regex/int5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
