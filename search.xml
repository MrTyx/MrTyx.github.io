<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[eSports is like competitive piano playing]]></title>
      <url>/2017/11/12/eSports-is-like-competitive-piano-playing/</url>
      <content type="html"><![CDATA[<p>If you subdivide any complex task recursively, you get a list of motor inputs that have this “quark like” quality of indivisiblity. As you move back up the recursive stack, each set of child tasks has a parent task which has the responsibility of monitoring the error rates of each of children. These error rates account for both on the individual mandates of that machine and their effects on the larger whole. This formula is how you learn the piano, and in esports it is elevated to a new level of complexity when forced to factor in the natural selection of playstyles in a changing meta.</p>
<a id="more"></a>
<h2 id="How-are-my-fingers-playing-WoW"><a href="#How-are-my-fingers-playing-WoW" class="headerlink" title="How are my fingers playing WoW?"></a>How are my fingers playing WoW?</h2><p>There is an ability that in World of Warcraft that Priests have called <em>Psychic Scream</em>. It forces all enemies around the player run away from the Priest. This includes the ingame monsters and players from the enemy faction. Ingame monsters are called <em>Mobs</em>. Having a player attack you is called “getting ganked” where the attacking player is the <em>Ganker</em>. Forcing something to run away from you is called a <em>Fear</em> effect. During a Fear effect, the character who is running away is uncontrollable. That means, if you get ganked by a member of the enemy faction, you can cast Psychic Scream fear everything around you, which allows you escape in the opposite direction. Abilities like Psychic Scream are called <em>Panic Buttons</em> by the community.</p>
<p>Your base layer motor machines, those with the quality of being indivisible, are at play when you map an spell to a hotkey. You drag a spell from your spellbook to your actionbar where you have associated a hotkey. For most players, their hands will be on the WASD keys. Therefore you might put Psychic Scream on the T key, where it is reachable by your index finger of your left hand. When you do this, you create the mental machine that is responsible for pushing that button. It is exactly the same as how we train ourselves to push specific keys on a piano. It is a shard of your psyche that knows how to move that finger over, and push down the button. When I think “Cast Psychic Scream”, how that is achieved is this machine’s job.</p>
<p>You have an event emitter that is parsing input from the screen. Individual pixels combine to represent an element in the digital landscape. Everything. Terrain, mobs, other players, mining nodes etc. That parsing process makes the event emitter chatter constantly with everything it sees. Some things, such as a rare mob or a member of the enemy faction, make the event emitter shout. </p>
<p>As you create your Psychic Scream machine, you give it the ability to listen. You let it listen to the event emitter. When a Rogue materializes behind you, your internal event emitter starts shouting “ROGUE!” like a blaring siren. Your Psychic Scream machine responds. Maybe the first few ganks, all of your panic button machinery fires at once which produces a panicked state. But after a few ganks, the parent of those individual panic buttons learns to serialize them into a combo. You learn to take the event of “getting ganked” and tie it to a series of motor functions, which could be “Psychic Scream, then Shadowmeld, then use my Mount”.</p>
<p>Once you have that, as we move recursively up the stack, we have exponentially more decision trees and interconnected hubs of complex motor functions. For example, players getting ganked will often have three choices; <em>Fight</em>, <em>Flee</em> or <em>Give Up</em>. Fleeing is an interesting choice because where are you fleeing to? Safety. Safety is towns. Towns have elite guards. Elite guards protect you from the opposing faction. One Elite is stronger than One Player. So if you get ganked, you should run to a town.</p>
<p>Ok, so now you need a machine to track the nearest town and continually update itself as you move about in the world (of warcraft). Which direction is it and how far? This is non-trivial because in moving about and rotating your character you could disorient yourself, resulting in death during a gank. And this machine needs to be aware of how fast you could get to safety. All of this continually updating information is factored in when this machine is asked to make a decision. </p>
<p>“ROGUE ROGUE ROGUE!!!” Can you make it to safety? It needs to be able to calculate and reach a decision of a course of action instantly and therefore trigger the motor functions for that relevant course of action.</p>
<h2 id="Why-eSports-is-like-piano-players"><a href="#Why-eSports-is-like-piano-players" class="headerlink" title="Why eSports is like piano players"></a>Why eSports is like piano players</h2><p>A piano player will have machines for individual keys. Those machines will have parent machines for a chord. Those will have parent machines for a series of chords which make up a part of a musical piece. A player wanting to perfect a musical piece will master all of the individual machines in the stack, because perfection in all the parts produces perfection in the whole.</p>
<p>After attaining perfection, they can respond to stimulation (such as their band, the crowd or their mood) to modify the machines inside a certain range. That is the personal flair that a musician can put on any individual song to give it a unique flavour, by giving it a “jazzy feel”, by slightly varying the individual motor functions.</p>
<p>In eSports, that external stimulation is a enemy player. A intelligient create who has a process which mirrors yours in that it is undergoing the same evolution. You don’t quite have that in music. I think the closest is that when you play in a band, you need to adapt to the tempo of your fellow musicians. But that is a harmonious process, and not the same as competition. Bands that have competition between their players don’t often survive. Bands are not battlefields.</p>
<p>Let us call the machine which interacts with other players a <em>playstyle</em>. This is the thematically similar to the musician’s personal flair. A playstyle is based on some rigid structure, much like how a musical piece is transcribed, but then is modified in some range by each player with experimental variations. The interaction of a population of playstyles produces trends, which are call <em>The Meta</em>. The meta is the aggregate of the playstyles of the population of players, the norm, the range of expected values. Experimental individuals are “playing outside the meta”.</p>
<p>Sometimes an individual player will attempt to create a new playstyle. This will require examining their entire structural stack. It is a cognitively difficult task. Most players will never attempt this. This analysis produces a hypothesis of a superior alternative. The player then makes the changes to their parent processes which make recursive changes down the entire hierarchy to the motor functions.</p>
<p>If at the end of this experiment, the individual player has indeed created a superior playstyle, it sends out ripples through the population of players who pay attention to the meta. Those players will now adapt to the existence of this new playstyle. This is called the meta shifting. For a game to be considered satisfying to competitive esports players, the meta needs to be constantly shifting. If necessary, the developers of the game need to “keep it fresh” by making changes to mechanisms which serve as inspiration for individuals to produce these ripples.</p>
<p>This entire lifecycle is what it would look like if we applied evolutionary principles to playing the piano. The competitive and warlike theme is necessary to force the root process to become dynamic to dynamic processes, other players. This appeals to young men, because of two reasons; first that if they perfect the motor functions they can perfect the whole of the structure, and second because if they can perfect the ability to read and adapt to the meta, they will be at the top of the hierarchy of players.</p>
<h2 id="Final-thoughts"><a href="#Final-thoughts" class="headerlink" title="Final thoughts"></a>Final thoughts</h2><p>I think one of the reasons the military forces recruits to perfect their bed making skills is because the recruit will be forced to subdivide a “perfect bed” into indivisible parts, and then perfect each one. This teaches the recruit how to do something perfectly. It’s the same with playing piano, or mastering a DPS rotation. However, when forced to adapt to a process which itself can adapt, you create the environment for evolution. Experimental players drive that evolution, but at the high individual cost of remapping entire substructures.</p>
<p><a href="https://lol.esportspedia.com/wiki/InSec#Trivia" target="_blank" rel="external">But perhaps now you can understand better why young male League of Legends fans cared that inSec changed the entire meta with his Lee Sin combos.</a></p>
]]></content>
      
        <categories>
            
            <category> Rambling </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Habitica Bulk ToDos from Windows CMD]]></title>
      <url>/2017/10/14/Habitica-Bulk-ToDos-from-Windows-CMD/</url>
      <content type="html"><![CDATA[<p>How to use Habitica’s API and Windows commandline.</p>
<a id="more"></a>
<p>First create a batch file in a folder which you can access by the $PATH variable. For example I have created <strong>todo.bat</strong> in <strong>C:\bin</strong> with the following (user credentials have been changed);</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powershell -command <span class="string">"$Headers = <span class="subst">@&#123;<span class="string">'x-api-user'</span>=<span class="string">'MY_HABITICA_USER_ID'</span>; <span class="string">'x-api-key'</span>=<span class="string">'MY_HABITICA_API_KEY'</span>;&#125;</span>; $Body = <span class="subst">@&#123;<span class="string">'type'</span>=<span class="string">'todo'</span>; <span class="string">'text'</span>=<span class="string">'%*'</span>;&#125;</span>; Invoke-WebRequest -Uri https://habitica.com/api/v3/tasks/user -Method POST -Headers $Headers -Body $Body"</span></div></pre></td></tr></table></figure>
<p>You can find your own User ID and API Token <a href="https://habitica.com/user/settings/api" target="_blank" rel="external"><strong>here</strong></a>.</p>
<p>Formatted for readability, this is what we are doing.</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">powershell -command <span class="string">"</span></div><div class="line">  $Headers = <span class="subst">@&#123;<span class="string">'x-api-user'</span>=<span class="string">'MY_HABITICA_USER_ID'</span>; <span class="string">'x-api-key'</span>=<span class="string">'MY_HABITICA_API_KEY'</span>;&#125;</span>;</div><div class="line">  $Body = <span class="subst">@&#123;<span class="string">'type'</span>=<span class="string">'todo'</span>; <span class="string">'text'</span>=<span class="string">'%*'</span>;&#125;</span>;</div><div class="line">  Invoke-WebRequest -Uri https://habitica.com/api/v3/tasks/user -Method POST -Headers $Headers -Body $Body</div><div class="line">"</div></pre></td></tr></table></figure>
<p>Now can open a command prompt and type <code>todo Buy eggs</code>. Check to see if that works.</p>
<p>Ok, what I like to do is run a youtube-dl script (subl is Sublime Text) passing it playlists as arguments.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youtube-dl --<span class="built_in">get</span>-<span class="built_in">title</span> --<span class="built_in">get</span>-duration --<span class="built_in">get</span>-id --ignore-<span class="built_in">errors</span> <span class="symbol">%</span>* &gt; C:\Users\Ty\Desktop\temp.txt &amp;&amp; subl C:\Users\Ty\Desktop\temp.txt<span class="string">"</span></div></pre></td></tr></table></figure>
<p>Which produces this output for repeated for each item in the each item in the playlist.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">TITLE</span></div><div class="line">ID</div><div class="line">DURATION</div></pre></td></tr></table></figure>
<p>Then in Sublime Text I use this pattern <code>.*\n.*\n.*\n</code> in Find and click Find All.</p>
<p>That gives me a cursor for each triple line. I rearrange the data till it looks like this;</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">TITLE [DURATION</span>]](https://www.youtube.com/watch?v=ID)</div></pre></td></tr></table></figure>
<p>Note, when you are editting;</p>
<ul>
<li>Make sure you turn off line wrap.</li>
<li>Run a find and replace on ‘ and “ replacing them with nothing.</li>
</ul>
<p>I have another batch file call <strong>todo_bulk.bat</strong> which contains this;</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> /F <span class="string">"tokens=*"</span> %%L <span class="keyword">in</span> (C:\Users\Ty\Desktop\temp.txt) <span class="keyword">do</span> todo.bat %%L</div></pre></td></tr></table></figure>
<p>That takes the temp file and processes each line as an individual todo, posting it to Habitica.</p>
<p>So I’m happy with the lines in temp.txt, and I’m ready to post them. I run “todo_bulk” and watch the output. Easy.</p>
]]></content>
      
        <categories>
            
            <category> Habitica </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Habitica </tag>
            
            <tag> CMD </tag>
            
            <tag> youtube-dl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 10 Quiz]]></title>
      <url>/2017/10/05/COSC1285%20Algorithms/Quiz-10/</url>
      <content type="html"><![CDATA[<p>Answers to questions about warshall’s algorithm, edit distance and coin row problem.</p>
<a id="more"></a>
<p>What is the time complexity of warshall’s algorithm while implemented using adjacency matrix.<br><strong>Answer: O(n^3)</strong></p>
<p>What is the time complexity of warshall’s algorithm while implemented using adjacency list and the graph is sparse?<br><strong>Answer: O(n^2)</strong></p>
<hr>
<p>Coin-row Problem is defined as: Given a row of n coins with positive integer values c1, c2, . . . , cn (not necessarily distinct), pick up the maximum amount of money with the constraint that no two adjacent coins can be selected. Consider the coins set with values {5, 1, 2, 10, 5, 2}. If  F(n) denote the maximum total amount of money picked up after considering all n coins in row;</p>
<p>What is the value of F(5)?<br><strong>Answer: 15</strong></p>
<p>What is the recurrence relation for F(5)?<br><strong>Answer: F(5) = max{F(4), 5+F(3)}</strong></p>
<hr>
<p>Let X = river and Y = digger. We want to find the edit distance between X and Y. Recall that, to compute the edit distance between X and Y, we learned a dynamic programming algorithm which works by filling in a 2d array M, such that M[n, m] (0 ≤ n ≤ 5, 0 ≤ m ≤ 6) equals the edit distance between X[1..n] and Y[1..n].</p>
<p>What will be the final value of M[5,5]?<br><strong>Answer: 4</strong></p>
<p>What will be the final value of M[5,6]?<br><strong>Answer: 3</strong></p>
<hr>
<p>Consider the dynamic programming algorithm for the 0-1 knapsack problem using size n=4 and capacity M=6, and with (value,weight) pairs as follows: { (3,1), (4,3), (8,6), (6,4) }. If V[i,j] refers to the optimal value for a knapsack of first i items in the capacity j;</p>
<p>What is the value of V[3,6]?<br><strong>Answer: 8</strong></p>
<p>What is the value of V[4,6]?<br><strong>Answer: 9</strong></p>
<hr>
<p>Why is Quicksort algorithm a dynamic programming approach?<br><strong>Answer: Quicksort is not a dynamic programming approach.</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Week 10 Quiz]]></title>
      <url>/2017/10/04/ISYS1126%20Web%20Database%20Apps/Quiz-10/</url>
      <content type="html"><![CDATA[<p>Answers to final questions on React</p>
<a id="more"></a>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><ul>
<li>While transferring data from parent to child component, use <strong>props</strong>.</li>
<li>While transferring data from a child to parent component, use <strong>callbacks and state</strong>.</li>
<li>In order to pass data from one sibling to another, one must use <strong>props, callback and state</strong>.</li>
<li>While using React with a non-react library, it is best to use <strong>uncontrolled</strong> component(s).</li>
<li>To write an uncontrolled component, instead of writing an event handler for every state update, you can use <strong>ref</strong> keyword to get form values from the DOM.</li>
<li>In react, form components are known as <strong>controlled</strong> components.</li>
<li>With a controlled component, every state change will have an associated handler function. <strong>True</strong></li>
<li><strong>ReactTransitionGroup</strong> can be used to implement animation with a component that undergoes change in state.</li>
</ul>
<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><ul>
<li><strong>Redux</strong> is loosely based on Flux.</li>
<li>React <strong>Flux</strong> pattern makes use of dispatchers and stores.</li>
</ul>
<h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h1><ul>
<li><strong>react router</strong> is a collection of navigational components that compose declaratively with your application.</li>
<li>The following command will install the react router packages and update the package.json file. <code>npm install react-router react-router-dom --save</code></li>
<li>While using react router, one must wrap the main app inside  <strong>BrowserRouter</strong> tags.</li>
<li>In react router, the <strong>Switch</strong> element will iterate over its children elements (the routes) and only render the first one that matches the current pathname.</li>
</ul>
<h1 id="Animations"><a href="#Animations" class="headerlink" title="Animations"></a>Animations</h1><ul>
<li>In a react web application, <strong>CSS3 transitions</strong> can be used to implement animation for a stateless (simple) component.</li>
</ul>
<h1 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h1><ul>
<li><strong>Firebase</strong> is Google’s cloud hosted database.</li>
<li>In Google’s cloud database- Firebase, the data is saved in <strong>xml</strong> format.</li>
</ul>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><ul>
<li>Bootstrap comes in-built with PhpStorm’s React project template. <strong>False</strong></li>
<li>MongoDb is a <strong>document-oriented</strong> database.</li>
<li>Using a local MongoDB instance with React involves writing code using <strong>MERN</strong> stack.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> React </tag>
            
            <tag> ReactRouter </tag>
            
            <tag> Flux </tag>
            
            <tag> Firebase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 9 Quiz]]></title>
      <url>/2017/10/01/COSC1285%20Algorithms/Quiz-9/</url>
      <content type="html"><![CDATA[<p>Answers to questions about Huffman coding and graphs.</p>
<a id="more"></a>
<p>Apply the Huffman coding algorithm for the alphabet and frequencies given below. What will be the length of the binary codeword for the letter ‘E’?  Note that frequency can be considered as a weight, or probability of occurance if we divide them by the total frequency (105 in this question).</p>
<table>
<thead>
<tr>
<th style="text-align:left">Letter</th>
<th style="text-align:left">Frequency</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">E</td>
<td style="text-align:left">21</td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">I</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">O</td>
<td style="text-align:left">12</td>
</tr>
<tr>
<td style="text-align:left">R</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">S</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">T</td>
<td style="text-align:left">14</td>
</tr>
</tbody>
</table>
<p><strong>Answer: 2</strong></p>
<hr>
<p>if graph G(V,E) is sparse, |E|, the number of edges, is the same order of magnitude as |V|, the number of vertices, what is the time complexity of Prim’s algorithm using a min-heap implementation?</p>
<p><strong>Answer: O(|E| log(|V|))</strong></p>
<hr>
<p>Using this image;</p>
<p><img src="/images/cosc1285/grid.png" alt=""></p>
<p>Let us assume we are running Prim’s algorithm to find the Minimum Spanning Tree (MST) on the following graph. Write the vertices in the order that Prim adds them to the minimum spanning tree, starting at root vertex A.</p>
<p><strong>Answer: A, J, G, E, C, D, F, H, B</strong></p>
<p>Let us assume that we run Kruskal’s algorithm to find the minimum spanning tree on the following graph. What is the weight of the tree edge that Kruskal adds in the 3rd iteration (i.e, the 3rd edge in order) in the minimum spanning tree?</p>
<p><strong>Answer: 4</strong></p>
<p>Let us assume we run Dijkstra algorithm to find the shortest path tree on the following graph starting from vertex A. What is the last vertex added in algorithm (i.e., the shortest path from A to that vertex is determined at the last iteration in the algorithm) ?</p>
<p><strong>Answer: B</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 8 Quiz]]></title>
      <url>/2017/09/24/COSC1285%20Algorithms/Quiz-8/</url>
      <content type="html"><![CDATA[<p>Answers to questions about distribution sorts and hash functions.</p>
<a id="more"></a>
<p>Apart from uniformally distributing the universe of keys (the set of all possible keys) to all hash table positions, what other desirable property should a hash function have if used in a hash table?  Select the best answer.</p>
<p><strong>Answer: The hash function should be fast to compute.</strong></p>
<p>–</p>
<p>After applying distribution sort to the array of 3,4,2,3,2,1,2 and copying all the array elements to the new, sorted array, what are the final numbers in the array that initially held the cumulative frequencies (note we are asking what are the numbers after we have decremented the relevant entries in the array that initially held the cumulative frequencies before the copying process).  The entries the “frequency/cumulative frequency” array are ordered as 1,2,3,4, i.e, first entry in that array corresponds to integer 1, 2nd to integer 2 etc.</p>
<p><strong>Answer: 0,1,4,6</strong></p>
<p>After applying distribution sort to the array of 2,4,8,6,4,6,2,8, and copying all the array elements to the new, sorted array, what are the final numbers in the array that initially held the cumulative frequencies (note we are asking what are the numbers after we have decremented the relevant entries in the array that initially held the cumulative frequencies before the copying process).  The entries the “frequency/cumulative frequency” array are ordered as 2,4,6,8, i.e, first entry in that array corresponds to integer 2, 2nd to integer 4 etc.</p>
<p><strong>Answer: 0,2,4,6</strong></p>
<hr>
<p>What is the worst case time complexity for distribution sort, where n &gt; n_max?  n is the number of elements in the array, n_max is the range of the unique values, i.e, the largest unique value - the smallest unique value.</p>
<p><strong>Answer: O(log n)</strong></p>
<p>What is the worst case time complexity for distribution sort, where n_max &gt; n?  n is the number of elements in the array, n_max is the range of the unique values, i.e, the largest unique value - the smallest unique value.</p>
<p> <strong>Answer: O(log n_max)</strong></p>
<hr>
<p> For the hash function h(k) = k mod 11, what key does index 1 holds for the set of keys 22,32,5,13,11,9,21, using linear probing addressing and  hash table indexing that starts at 0?</p>
<p><strong>Answer: 11</strong> (22 in #0, therefore 11 in #1)</p>
<p>For the hash function h(k) = k mod 11, what key does index 6 holds for the set of keys 20, 5, 18, 15, 2, 4, 9 and using linear probing addressing?</p>
<p><strong>Answer: 4</strong> (15 in #4, 5 in #5, therefore 4 in #6)</p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Week 8 Quiz]]></title>
      <url>/2017/09/15/ISYS1126%20Web%20Database%20Apps/Quiz-8/</url>
      <content type="html"><![CDATA[<p>Answers to the code sample questions, as well as React and Firebase.</p>
<a id="more"></a>
<h2 id="Code-samples"><a href="#Code-samples" class="headerlink" title="Code samples"></a>Code samples</h2><ul>
<li>In the following code snippet: <code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</code> the highlighted tag is known as <strong>JSX</strong></li>
<li>In the following screenshot the “props” is being passed to <strong>base class constructor</strong>.<br><img src="/images/isys1126/test7_1.PNG" alt=""></li>
<li>In React, the following class has a special name known as <strong>ES6</strong> class.<br><img src="/images/isys1126/test7_2.PNG" alt=""></li>
</ul>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>React comes pre-built with Bootstrap capabilities. <strong>False</strong></li>
<li>In React, event handlers are passed instances of <strong>Synthetic Event</strong>, a cross-browser wrapper around the browser’s native event. </li>
<li>In React, components can be added to a list, which in turn can use JavaScript’s <strong>map</strong> function for iteration purposes.</li>
<li>Will the following syntax work in React? <code>&lt;button onclick=&quot;function()&quot;&gt;Do something&lt;/button&gt;</code> <strong>No - onClick</strong></li>
<li>The <strong>getInitialState</strong>  method is called before the component is mounted.</li>
<li>In React, sharing state is accomplished by moving it down to the closest common ancestor of the components that need it. <strong>False</strong></li>
<li>In React, after compilation, JSX expressions become regular <strong>JavaScript objects</strong>.</li>
<li>An input form element whose value is controlled by React is called a <strong>controlled</strong> component.</li>
<li>React library creates a lightweight tree from JavaScript objects (that mimics a document object model) known as <strong>Virtual DOM</strong>.</li>
<li>React.js offers full MVC stack. <strong>False</strong></li>
<li>In React, a component <strong>can be both ie. a class or a function</strong>.</li>
<li>React native is <strong>for developing mobile apps</strong>.</li>
<li>In order to assign a state in a class, one must use the expression <strong>this.state</strong>.</li>
<li>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this <strong>return null</strong>.</li>
</ul>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ul>
<li><strong>Firebase</strong> can be used to implement facebook login in a React web application.</li>
<li>APIs usually return data in <strong>XML and/or JSON</strong> format(s).</li>
<li>An API designed in Laravel that returns JSON data can be consumed in a React web app using <strong>fetch</strong> and <strong>response.json</strong> functions.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> React </tag>
            
            <tag> Firebase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 7 Quiz]]></title>
      <url>/2017/09/01/COSC1285%20Algorithms/Quiz-7/</url>
      <content type="html"><![CDATA[<p>Answers to recursive algorithm notation.</p>
<a id="more"></a>
<p>Consider the following recurrence relations:</p>
<p>C(n) = C(n-1) + 3, C(0) = 2 <strong>Answer: 3n+2</strong></p>
<p>C(n) = C(n-1)-1, C(1) = 3 <strong>Answer: 4-n</strong></p>
<p>C(n) = C(n-1) + 1, C(3) = 1 <strong>Answer: n-2</strong></p>
<hr>
<p>Simplify;</p>
<p>$\sum_{i=0}^n i = \frac{n(n+1)}{2}$</p>
<p>$\sum_{i=0}^n 1 = n+1$</p>
<hr>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RecursiveAlgo(<span class="name">n</span>)</div><div class="line">    return RecursiveAlgo(<span class="name">n-1</span>) / <span class="number">2</span></div></pre></td></tr></table></figure>
<p>What is the recurrence relation for the number of divisions executed by this recursive algorithm<br><strong>Answer: C(n) = C(n-1) + 1</strong></p>
<hr>
<p>Given a set of n points, P[0 .. n-1], consider the following algorithm:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">algorithm1(P)</div><div class="line">    <span class="built_in">max</span> = -infinity</div><div class="line">    <span class="keyword">for</span> i = <span class="number">0</span> to n<span class="number">-1</span></div><div class="line">        <span class="keyword">for</span> j = i+<span class="number">1</span> to n<span class="number">-1</span></div><div class="line">            <span class="built_in">dist</span> = distance(P[i], P[j])</div><div class="line">            <span class="keyword">if</span> <span class="built_in">dist</span> &lt; <span class="built_in">max</span></div><div class="line">                <span class="built_in">max</span> = <span class="built_in">dist</span></div></pre></td></tr></table></figure>
<p><strong>Answer:</strong><br>$\sum<em>{i=0}^{n-1} \sum</em>{j=i+1}^{n-1} 1$</p>
<p>For a set of n points, P[0..n-1], consider the following algorithm:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">algorithm(P)</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(P) &gt; <span class="number">0</span></div><div class="line">        <span class="built_in">max</span> = P[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i = <span class="number">1</span> <span class="built_in">to</span> n <span class="number">-1</span></div><div class="line">             <span class="keyword">if</span> P[i] &gt; <span class="built_in">max</span></div><div class="line">                 <span class="built_in">max</span> = P[i]</div><div class="line">       <span class="literal">return</span> <span class="built_in">max</span></div></pre></td></tr></table></figure>
<p>If the basic operation is comparison (&gt;), how many basic operations does this algorithm computes?</p>
<p><strong>Answer:</strong> $\sum_{i=1}^{n-1} 1$</p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Week 6 Quiz]]></title>
      <url>/2017/08/26/ISYS1126%20Web%20Database%20Apps/Quiz-6/</url>
      <content type="html"><![CDATA[<p>Answers to questions about Eloquent Queries, final topics on Laravel and introduction to Redis.</p>
<a id="more"></a>
<h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ul>
<li>PHP developers should be concerned with levels <strong>1 and 2</strong> of PHP PSR.</li>
<li><strong>REST</strong> is an architectural style for network communication between applications.</li>
</ul>
<h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul>
<li>It is possible to run multiple seeder files all at once. <strong>True</strong></li>
<li>The third-party packages nwidart/laravel-modules and artem-schander/l5-modular can be used to <strong>create directory structures in a larger laravel project for easier code separation and maintenance.</strong></li>
<li>In Laravel project, middlewares are located inside <strong>app/Http</strong> directory.</li>
<li>The following expression can be used to generate CSRF token field in a form. <strong>csrf_field()</strong></li>
<li>Using Laravel, it is possible to create your own API. <strong>True</strong></li>
<li>The command php artisan db:seed is used to <strong>run the default seed file created as part of Laravel project creation.</strong></li>
<li>The following command can be used to create the login, logout and registration boilerplate code. <strong>php artisan make:auth</strong></li>
<li>Laravel does not support connection to any back end database apart from MySQL. <strong>False</strong></li>
</ul>
<h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><ul>
<li>The default session driver settings are located inside <strong>.env and config/session.php</strong> files.</li>
<li>Flash messages can be stored in <strong>sessions</strong>.</li>
</ul>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li>In order to use redis as a session storage mechanism in a laravel project, the only component needed is a third-party package called predis. <strong>False</strong></li>
<li><strong>Redis</strong> is in-memory data structure store, used as a database, cache and message broker.</li>
</ul>
<h3 id="Eloquent-Queries"><a href="#Eloquent-Queries" class="headerlink" title="Eloquent Queries"></a>Eloquent Queries</h3><ul>
<li>The following method can be used to view the queries generated by Eloquent. <strong>toSql()</strong></li>
<li>One can embed a raw SQL in Laravel code in <strong>controller</strong> file(s).</li>
<li><p>Is the following Laravel query permissible (do you think the syntax will work)?</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DB::table(<span class="string">'orders'</span>)-&gt;where(<span class="string">'finalized'</span>, <span class="number">1</span>)-&gt;avg(<span class="string">'price'</span>);</div></pre></td></tr></table></figure>
<p><strong>Yes</strong></p>
</li>
<li><p>The following Laravel Eloquent command can be used to work with data in a “users” table 5 rows at a time.<br><strong>Answer:</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DB::table(<span class="string">'users'</span>)-&gt;orderBy(<span class="string">'id'</span>)-&gt;chunk(<span class="number">5</span>, <span class="function"><span class="keyword">function</span><span class="params">($users)</span> </span>&#123;</div><div class="line">  <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><ul>
<li>The following code can be placed in <strong>route</strong> file to generate multiple records in a database table:<br><img src="/images/isys1126/faker.jpg" alt=""></li>
<li>The following image demonstrates an example of <strong>flash message.</strong><br><img src="/images/isys1126/flash.jpg" alt=""></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> PHP </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 6 Quiz]]></title>
      <url>/2017/08/24/COSC1285%20Algorithms/Quiz-6/</url>
      <content type="html"><![CDATA[<p>Answers to questions about heaps and AVL trees.</p>
<a id="more"></a>
<p>Given an array of unsorted items, your objective is to determine if all items in the array are distinct. You choose presorting-based algorithm to solve the problem. Which of the following sorting algorithm is a better choice in your approach?</p>
<p><strong>Answer: Merge sort</strong></p>
<p>Construct a max heap for 6,5,3,1,8,7,2,4, using the bottom up approach (initialise heap tree, then repair).  What is the root node of this max heap?</p>
<p><strong>Answer: 8</strong> (because the top of the heap is by definiton the largest)</p>
<p>Starting with an empty tree, insert the following keys into the 2-3 tree in order: 5, 16, 22, 45, 2. What will be the root node?</p>
<p><strong>Answer: 16</strong> (left node is 2,5 and right node is 22,45)</p>
<p>An AVL Tree is constructed by inserting the elements in the following order 5,4,2,3,7,6. Which elements are the leaf nodes in the AVL tree?</p>
<p><strong>Answer: 3,5,7</strong></p>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html" target="_blank" rel="external">https://www.cs.usfca.edu/~galles/visualization/AVLtree.html</a></p>
<p>The following insertions are made to an initially empty AVL Tree : 5,4,3,2. During the construction of the tree, what rotation was applied to balance it?</p>
<p><strong>Answer: Right Rotation</strong></p>
<p><a href="https://www.cise.ufl.edu/~nemo/cop3530/AVL-Tree-Rotations.pdf" target="_blank" rel="external">https://www.cise.ufl.edu/~nemo/cop3530/AVL-Tree-Rotations.pdf</a></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 5 Quiz]]></title>
      <url>/2017/08/17/COSC1285%20Algorithms/Quiz-5/</url>
      <content type="html"><![CDATA[<p>Answers to questions on Merge sort, Quick Sort and QuickHull</p>
<a id="more"></a>
<p>A sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input unsorted array. True or False? : Quick Sort is a stable sorting algorithm.</p>
<p><strong>Answer: False</strong></p>
<p>Consider the following sorted array of n numbers: 1, 2, 3, 4, 5,……, n. The pivot value is the first element of array. What is the time complexity of Quick sort for this sorted array?</p>
<p><strong>Answer: O(n^2)</strong></p>
<p>Consider the following array of numbers: 21, 1, 26, 45, 29, 28, 2, 9, 16, 49, 39, 27, 43, 34, 46, 40. In the merge sort, which answer illustrates the first two arrays to be merged?</p>
<p><strong>Answer: 21 and 1</strong></p>
<p>Which of the following is a correct statement on Merge Sort?</p>
<p><strong>Answer: It divides the unsorted array into 2 sublists of equal size</strong></p>
<p>What is the best case time complexity of Merge sort on an array of n numbers?</p>
<p><strong>Answer: O(n log(n))</strong></p>
<p>What is the worst case complexity of the QuickHull algorithm?</p>
<p><strong>Answer: O(n^2)</strong></p>
<p>Consider the following array: 6,3,8,7,11,13,4,5,12.  We consider applying Quick sort on the array.  We use the first element in the array as pivot value.  After the first iteration in Quick sort, what will be the two partitioned sub-arrays using the pivot value? </p>
<p><strong>Answer: 4,3,5 and 11,13,7,8,12</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Week 4 Quiz]]></title>
      <url>/2017/08/12/ISYS1126%20Web%20Database%20Apps/Quiz-4/</url>
      <content type="html"><![CDATA[<p>Answers to intermediate questions about Laravel</p>
<a id="more"></a>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul>
<li>Views pass the data to controllers. <strong>false</strong></li>
<li>Models pass the data to views. <strong>false</strong></li>
</ul>
<h3 id="Where-is"><a href="#Where-is" class="headerlink" title="Where is?"></a>Where is?</h3><ul>
<li>The cardinality relationship (1-1 or 1-many or many-many) between the tables is specified in the <strong>model</strong> file.</li>
<li>A better place to put the validation logic is the <strong>request</strong> class.</li>
<li>In a laravel project, sessions are stored (by default) inside the <strong>storage/framework/session</strong> folder.</li>
<li>In a laravel project route file is called as <strong>web.php</strong>.</li>
</ul>
<h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul>
<li>When a Laravel project is moved to GIT, .env file will be ignored. <strong>true</strong></li>
<li><strong>Tinker</strong> is laravel’s repl (interactive language shell) which helps to play around with data in the database.</li>
<li>The tinker command factory(App\User::class, 10)-&gt;create(); can be used to <strong>seed a user table in the database</strong>.</li>
<li>The command php artisan make:model Car will create <strong>model file</strong>.</li>
<li>Validator class in Laravel is  <strong>a facade</strong>.</li>
<li>In a master template file <strong>@yield</strong> directive is used to display the contents of a given section.</li>
<li>When defining a child page, you may use the Blade <strong>@extends</strong> directive to specify which layout the child page should “inherit”.</li>
<li>If the controller has a variable called $egress, it can be accessed in a view as <strong></strong>.</li>
</ul>
<h3 id="3rd-Party"><a href="#3rd-Party" class="headerlink" title="3rd Party"></a>3rd Party</h3><ul>
<li>Laravel’s templating language is known as <strong>Blade</strong>.</li>
<li>A blade file has a <strong>.php</strong> extension.</li>
<li><strong>laravelcollective/html</strong> package can be used to create dynamic forms in blade files.</li>
<li><strong>Redis</strong> is a 3rd party solution that can be used for the session management.</li>
<li>Laravel comes in-built with OR/M tools collectively known as <strong>Eloquent</strong>.</li>
<li>In Laravel, <strong>eloquent</strong> helps us to wrap our database into objects.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[INTE2401 Cloud Security Week 4 Notes]]></title>
      <url>/2017/08/11/INTE2401%20Cloud%20Security/Week-4/</url>
      <content type="html"><![CDATA[<p>Implementation of a Vigenere Cipher in javascript.</p>
<a id="more"></a>
<p>At first, it appears scary. But really it is just an addition table.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> key = process.argv[<span class="number">2</span>].toUpperCase();</div><div class="line"><span class="keyword">const</span> string = process.argv[<span class="number">3</span>].toUpperCase();</div><div class="line"></div><div class="line"><span class="keyword">const</span> encode = <span class="function"><span class="params">str_i</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> k = key.charCodeAt(str_i % key.length) - <span class="number">65</span>;</div><div class="line">  <span class="keyword">let</span> c = string.charCodeAt(str_i) + k;</div><div class="line">  <span class="keyword">if</span> (c &gt; <span class="number">90</span>) c -= <span class="number">26</span>;</div><div class="line">  process.stdout.write(<span class="built_in">String</span>.fromCharCode(c));</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++) encode(i);</div></pre></td></tr></table></figure>
<p>I’m using the example from Wikipedia. Running it we get;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node encode lemon attackatdawn</span></div><div class="line">LXFOPVEFRNHR</div></pre></td></tr></table></figure></p>
<p>That matches perfectly. Now we just invert the logic.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> key = process.argv[<span class="number">2</span>].toUpperCase();</div><div class="line"><span class="keyword">const</span> string = process.argv[<span class="number">3</span>].toUpperCase();</div><div class="line"></div><div class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">str_i</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> k = key.charCodeAt(str_i % key.length) - <span class="number">65</span>;</div><div class="line">  <span class="keyword">let</span> c = string.charCodeAt(str_i) - k;</div><div class="line">  <span class="keyword">if</span> (c &lt; <span class="number">65</span>) c += <span class="number">26</span>;</div><div class="line">  process.stdout.write(<span class="built_in">String</span>.fromCharCode(c));</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++) decode(i);</div></pre></td></tr></table></figure></p>
<p>Which we run similarly as<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node decode lemon LXFOPVEFRNHR</span></div><div class="line">ATTACKATDAWN</div></pre></td></tr></table></figure></p>
<p>Cool beans. Like I wrote at the start, it seems like a scary cipher, but its rather toothless.</p>
<hr>
<h3 id="To-Study-Simplified-DES-Cipher"><a href="#To-Study-Simplified-DES-Cipher" class="headerlink" title="To Study - Simplified DES Cipher"></a>To Study - Simplified DES Cipher</h3><ul>
<li><a href="https://terenceli.github.io/assets/file/mimaxue/SDES.pdf" target="_blank" rel="external">https://terenceli.github.io/assets/file/mimaxue/SDES.pdf</a></li>
<li><a href="http://homepage.smc.edu/morgan_david/vpn/C-SDES.pdf" target="_blank" rel="external">http://homepage.smc.edu/morgan_david/vpn/C-SDES.pdf</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> INTE2401 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 4 Quiz]]></title>
      <url>/2017/08/10/COSC1285%20Algorithms/Quiz-4/</url>
      <content type="html"><![CDATA[<p>Answers to the online Algorithms and Analysis quiz.</p>
<a id="more"></a>
<p>What is the worst case complexity for insertion sort, and in what scenario when is it achieved?  Assume we are sorting an array of size n. If there are two or more answers that could be possible, choose that is always guaranteed to result in the worst case.<br>  <strong>O(n^2)</strong></p>
<p>Why can Shell Sort achieve O(n^1.5) worst case complexity?<br>  <strong>Shell sort uses an interleaving strategy that progressively bring the array to near sortedness, such that when insertion sort is applied, it runs in linear time.</strong></p>
<p>Suppose you have the following sorted list [3, 5, 6, 8, 11, 12, 14, 15, 17, 18] and are using the recursive binary search algorithm. Which group of numbers correctly shows the sequence of comparisons used to find the key 8?  If the array/subarray has even length, there is two choices for the middle element.  In this case, choose the left one, i.e., a, b, c, d, then middle element is b.<br>  <strong>11, 5, 6, 8</strong></p>
<p>Let us consider a digraph G(V, E) where V is the set of nodes and E is the set of edges. What is the complexity of Source Removal Algorithm in topological sorting for a digraph G(V,E) represented as a adjacency list?<br>  <strong>O( |V| + |E| )</strong></p>
<p>Consider the following Binary Search Tree. If the node 10 is deleted, which of the following node will be the new the root?<br>  <img src="/images/cosc1285/bst.jpg" alt=""><br>  <strong>27</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 4 Notes]]></title>
      <url>/2017/08/09/COSC1285%20Algorithms/Week-4/</url>
      <content type="html"><![CDATA[<p>A javascript implementation of InsertionSort.</p>
<a id="more"></a>
<p>Here is the algorithm pseudocode from the textbook.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ALGORITHM InsertionSort(A[0..n − 1])</div><div class="line">//Sorts a given<span class="built_in"> array </span>by insertion sort</div><div class="line">//Input: An<span class="built_in"> array </span>A[0..n − 1] of n orderable elements</div><div class="line">//Output: Array A[0..n − 1] sorted in nondecreasing order</div><div class="line">for i ← 1 to n − 1 do</div><div class="line">  v ← A[i]</div><div class="line">  j ← i − 1</div><div class="line">  while j ≥ 0<span class="built_in"> and </span>A[j] &gt; v do</div><div class="line">    A[j + 1]← A[j]</div><div class="line">    j ← j − 1</div><div class="line">  A[j + 1] ← v</div></pre></td></tr></table></figure>
<p>Here is the output we are expecting;</p>
<p><img src="/images/cosc1285/table3.jpg" alt=""></p>
<p>It is a pretty straightforward algorithm. Its basically the same logic for how I organize a hand of cards.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = [<span class="number">89</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">17</span>];</div><div class="line"></div><div class="line"><span class="keyword">const</span> print = <span class="function"><span class="params">marker</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> spacer = marker === i ? <span class="string">" | "</span> : <span class="string">"   "</span>;</div><div class="line">    process.stdout.write(<span class="string">`<span class="subst">$&#123;spacer&#125;</span><span class="subst">$&#123;data[i]&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">  process.stdout.write(<span class="string">"\n"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; data.length; i++) &#123;</div><div class="line">  print(i);</div><div class="line">  <span class="keyword">let</span> v = data[i];</div><div class="line">  <span class="keyword">let</span> j = i - <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; data[j] &gt; v) &#123;</div><div class="line">    data[j + <span class="number">1</span>] = data[j];</div><div class="line">    j = j - <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  data[j + <span class="number">1</span>] = v;</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(data.length);</div></pre></td></tr></table></figure>
<p>Running that, we get the correct output;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node insertionSort</span></div><div class="line">89 | 45   68   90   29   34   17</div><div class="line">45   89 | 68   90   29   34   17</div><div class="line">45   68   89 | 90   29   34   17</div><div class="line">45   68   89   90 | 29   34   17</div><div class="line">29   45   68   89   90 | 34   17</div><div class="line">29   34   45   68   89   90 | 17</div><div class="line">17   29   34   45   68   89   90</div></pre></td></tr></table></figure></p>
<p>Easy as :)</p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to play a sound after a command completes in Windows]]></title>
      <url>/2017/08/08/How-to-play-a-sound-after-a-command-completes-in-Windows/</url>
      <content type="html"><![CDATA[<p>A simple way to play a sound after a long running command completes in Windows.</p>
<a id="more"></a>
<p>I have been reading guides on playing a terminal bell in CMD. Supposedly “echo ^G” works, but I haven’t any success. Which was fine because the bell sound wasn’t exactly the sound I wanted anyway. Here is the simplest solution. First browse to %windir%\Media and find a sound you like. I choose %windir%\Media\tada.wav</p>
<p>Next create a batch file like below and store it somewhere such that it is accessibly by the PATH environment variable. In my case, I have a C:\bin folder which I have saved below as ding.bat (get it… dingbat.. hilarious I know).</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">powershell</span> <span class="selector-tag">-c</span> (<span class="selector-tag">New-Object</span> <span class="selector-tag">Media</span><span class="selector-class">.SoundPlayer</span> "%<span class="selector-tag">windir</span>%\<span class="selector-tag">Media</span>\<span class="selector-tag">tada</span><span class="selector-class">.wav</span>")<span class="selector-class">.PlaySync</span>();</div></pre></td></tr></table></figure>
<p>Why Powershell? Because I want something that plays an audio file without opening a new window. And some of the guides recommend installing mplay32 which I think is unnecessary if Powershell does what I need. Commandline VLC (cvlc) would also be a good alternative if you don’t have Powershell installed.</p>
<p>Ok, now test it by Win+R and running “ding”. If that works, you can use such that;</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update <span class="meta">&amp;&amp; ding</span></div></pre></td></tr></table></figure>
<p>Now you have a simple piece of code that you can add to a large process chain. For example, I have a batch file for downloading youtube videos.</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youtube-dl %* -o %USERPROFILE%<span class="string">"\Desktop\%%(title)s.%%(ext)s"</span> &amp;&amp; ding &amp;&amp; <span class="keyword">exit</span></div></pre></td></tr></table></figure>
<p>To use, hit Win+R and type “dl <a href="https://www.youtube.com/watch?v=9bZkp7q19f0" target="_blank" rel="external">https://www.youtube.com/watch?v=9bZkp7q19f0</a>“. Easy.</p>
]]></content>
      
        
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 3 Quiz]]></title>
      <url>/2017/08/03/COSC1285%20Algorithms/Quiz-3/</url>
      <content type="html"><![CDATA[<p>Answers to the online Algorithms and Analysis quiz.</p>
<a id="more"></a>
<p><img src="/images/cosc1285/graphSearch.jpg" alt=""></p>
<p>Starting at vertex 1, what is the sequence of vertices visited in a breadth-first-search traversal of the graph?  Where there are multiple vertices to next traverse, select the vertex with the smallest label to visit next.  The answers are the format of x,y,z, if the traversal visits x, then y, then z.</p>
<p><strong>Answer: 1,2,6,4,5,3</strong></p>
<p>Same question but depth-first-search traversal</p>
<p><strong>Answer 1,2,4,3,5,6</strong></p>
<hr>
<p>Using the exhaustive search approach, what is the maximum value achieved for the following knapsack problem:<br>Items, (weight, value): (3, 12), (5, 23), (1, 5), (6, 30), (4, 20), (6, 15)<br>Weight capacity of Knapsack = 7</p>
<p><strong>Answer: 35</strong></p>
<p>Using the exhaustive search approach, what is the maximum number of subsets evaluated for the following knapsack problem:<br>Items, (weight, value): (3, 12), (5, 23), (1, 5), (6, 30)<br>Weight capacity of Knapsack = 7</p>
<p><strong>Answer: 16</strong></p>
<hr>
<p>Consider the array e, d, c, b, a, f, g.</p>
<p>Apply bubble sort on this array.  What is the array after the first three steps of bubble sort?   The answers are in the format of x,y,z, e.g., for the original array, this will be e,d,c,b,a,f,g.</p>
<p><strong>Answer: b,a,c,d,e,f,g</strong></p>
<p>Apply selection sort on this array.  What is the array after the first three steps of selection sort?   The answers are in the format of x,y,z, e.g., for the original array, this will be e,d,c,b,a,f,g.</p>
<p><strong>Answer: a,b,c,d,e,f,g</strong></p>
<hr>
<p>What is the worst case complexity (in terms of the number of comparisons) for selection sort, sorting an array of n elements?</p>
<p><strong>Answer: O(n^2)</strong></p>
<p>What is the best case complexity (in terms of the number of comparisons) for selection sort, sorting an array of n elements?</p>
<p><strong>Answer: O(n^2)</strong></p>
<hr>
<p>What is the worst case complexity (in terms of the number of comparisons) for early termination bubble sort, sorting an array of n elements?</p>
<p><strong>Answer: O(n^2)</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 3 Notes]]></title>
      <url>/2017/08/02/COSC1285%20Algorithms/Week-3/</url>
      <content type="html"><![CDATA[<p>Notes from lecture on algorithmic orders of growth, and javascript implementations of selection sort and bubble sort.</p>
<a id="more"></a>
<h3 id="Rule-of-thumb-for-comparing-orders-of-growth"><a href="#Rule-of-thumb-for-comparing-orders-of-growth" class="headerlink" title="Rule of thumb for comparing orders of growth."></a>Rule of thumb for comparing orders of growth.</h3><p>$$ O(n^n) &gt; O(n!) &gt; O(a^n) &gt; O(n^a) &gt; O(\log{(n)}) &gt; O(1)$$</p>
<p><em>Note</em>: Don’t forget that $\log_a{b}^c= c \cdot \log_a{b}$ so be careful about assuming two log functions have the same order of growth.</p>
<!-- Tutorial example solution (ordered from lowest to highest)
- $(n-2)!$
- $5\log(n+100)^10$
- $2^{2n}$
- $0.0001n^4 + 3n^3 + 1$
- $\log_e^2{n}$
- $\sqrt[3]{n}$
- $3^n$ -->
<hr>
<h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>This algorithm is to iterate over an array, finding the smallest value along the way, then at the end swap it with the first position. Repeat for the second position, etc.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ALGORITHM SelectionSort(A[0..n − 1])</div><div class="line">//Sorts a given<span class="built_in"> array </span>by selection sort</div><div class="line">//Input: An<span class="built_in"> array </span>A[0..n − 1] of orderable elements</div><div class="line">//Output: Array A[0..n − 1] sorted in nondecreasing order</div><div class="line">for i ← 0 to n − 2 do</div><div class="line">  min ← i</div><div class="line">  for j ← i + 1 to n − 1 do</div><div class="line">   <span class="built_in"> if </span>A[j] &lt; A[min] min ← j</div><div class="line">  swap A[i]<span class="built_in"> and </span>A[min]</div></pre></td></tr></table></figure>
<p>I wanted to make sure I matched the textbook output;</p>
<p><img src="/images/cosc1285/table3_1.jpg" alt=""></p>
<p>This was my implementation.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [<span class="number">89</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">17</span>];</div><div class="line"></div><div class="line"><span class="comment">// Format table like in book.</span></div><div class="line"><span class="keyword">const</span> print = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> spacer = done === i ? <span class="string">" | "</span> : <span class="string">"   "</span>;</div><div class="line">    process.stdout.write(<span class="string">`<span class="subst">$&#123;spacer&#125;</span><span class="subst">$&#123;array[i]&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">  process.stdout.write(<span class="string">`\n`</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Print initial row</span></div><div class="line">print(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// Selection sort</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</div><div class="line">  <span class="keyword">let</span> min = i;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</div><div class="line">    <span class="keyword">if</span> (array[j] &lt; array[min]) min = j;</div><div class="line">  &#125;</div><div class="line">  [array[i], array[min]] = [array[min], array[i]];</div><div class="line">  print(i + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running that, we get the correct output.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ node selection_sort</div><div class="line">| 89   45   68   90   29   34   17</div><div class="line">  17 | 45   68   90   29   34   89</div><div class="line">  17   29 | 68   90   45   34   89</div><div class="line">  17   29   34 | 90   45   68   89</div><div class="line">  17   29   34   45 | 90   68   89</div><div class="line">  17   29   34   45   68 | 90   89</div><div class="line">  17   29   34   45   68   89 | 90</div></pre></td></tr></table></figure>
<hr>
<h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h3><p>This algorith starts with the first element and iterate over the array, trading up whenever we find a greater value.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ALGORITHM BubbleSort(A[0..n − 1])</div><div class="line">//Sorts a given<span class="built_in"> array </span>by bubble sort</div><div class="line">//Input: An<span class="built_in"> array </span>A[0..n − 1] of orderable elements</div><div class="line">//Output: Array A[0..n − 1] sorted in nondecreasing order</div><div class="line">for i ← 0 to n − 2 do</div><div class="line">  for j ← 0 to n − 2 − i do</div><div class="line">   <span class="built_in"> if </span>A[j + 1] &lt; A[j] swap A[j]<span class="built_in"> and </span>A[j + 1]</div></pre></td></tr></table></figure>
<p>I didn’t quite match the textbook output because I wanted each iteration on its own line.</p>
<p><img src="/images/cosc1285/table3_2.jpg" alt=""></p>
<p>This is my implementation.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [<span class="number">89</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">17</span>];</div><div class="line"></div><div class="line"><span class="comment">// Format table like in book.</span></div><div class="line"><span class="keyword">const</span> print = <span class="function">(<span class="params">comparison, done</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> spacer = <span class="string">"   "</span>;</div><div class="line">    <span class="keyword">if</span> (done === i) spacer = <span class="string">" | "</span>;</div><div class="line">    <span class="keyword">if</span> (comparison === i) spacer = <span class="string">" ? "</span>;</div><div class="line">    process.stdout.write(<span class="string">`<span class="subst">$&#123;spacer&#125;</span><span class="subst">$&#123;array[i]&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">  process.stdout.write(<span class="string">`\n`</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Bubble sort</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">    print(j + <span class="number">1</span>, array.length - i);</div><div class="line">    <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</div><div class="line">      [array[j], array[j + <span class="number">1</span>]] = [array[j + <span class="number">1</span>], array[j]];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Print final row</span></div><div class="line">print(<span class="literal">null</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>Running that, we get the output I expect.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ node bubble_sort</div><div class="line">  89 ? 45   68   90   29   34   17</div><div class="line">  45   89 ? 68   90   29   34   17</div><div class="line">  45   68   89 ? 90   29   34   17</div><div class="line">  45   68   89   90 ? 29   34   17</div><div class="line">  45   68   89   29   90 ? 34   17</div><div class="line">  45   68   89   29   34   90 ? 17</div><div class="line">  45 ? 68   89   29   34   17 | 90</div><div class="line">  45   68 ? 89   29   34   17 | 90</div><div class="line">  45   68   89 ? 29   34   17 | 90</div><div class="line">  45   68   29   89 ? 34   17 | 90</div><div class="line">  45   68   29   34   89 ? 17 | 90</div><div class="line">  45 ? 68   29   34   17 | 89   90</div><div class="line">  45   68 ? 29   34   17 | 89   90</div><div class="line">  45   29   68 ? 34   17 | 89   90</div><div class="line">  45   29   34   68 ? 17 | 89   90</div><div class="line">  45 ? 29   34   17 | 68   89   90</div><div class="line">  29   45 ? 34   17 | 68   89   90</div><div class="line">  29   34   45 ? 17 | 68   89   90</div><div class="line">  29 ? 34   17 | 45   68   89   90</div><div class="line">  29   34 ? 17 | 45   68   89   90</div><div class="line">  29 ? 17 | 34   45   68   89   90</div><div class="line">| 17   29   34   45   68   89   90</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISYS1126 Web Database Applications Week 2 Quiz]]></title>
      <url>/2017/07/30/ISYS1126%20Web%20Database%20Apps/Quiz-2/</url>
      <content type="html"><![CDATA[<p>Answers to entry level questions regarding PHP, patterns and Laravel.</p>
<a id="more"></a>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li>Which of the following PHP methods issues a warning upon encountering an error? <strong>include</strong></li>
<li>Which of the following PHP methods terminates upon encountering an error? <strong>require</strong></li>
<li>Which of the following promotes code reuse? <strong>trait</strong></li>
<li>It is possible to instantiate a trait. <strong>false</strong></li>
<li>In PHP, it is possible to create a static variable. <strong>true</strong></li>
<li><strong>Scope resolution</strong> operator is used to call a static method via Class name in PHP.</li>
<li>In PHP, the pseudo-variable <strong>$this</strong> is available when a method is called from within an object context.</li>
<li>In PHP, the <strong>-&gt;</strong> operator is used to call class methods via object(s).</li>
<li>In PHP a constructor is defined with the keyword <strong>__construct</strong></li>
<li><strong>Protected</strong> in PHP makes sure that the class member is accessible via derived class.</li>
<li><strong>Final</strong> keyword prevents the overriding of a method in the child class.</li>
</ul>
<h3 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h3><ul>
<li>An <strong>interface</strong> is a supertype that specifies method headers without implementations.</li>
<li>In <strong>singleton</strong> pattern, a class has one instance, It provides a global access point to it.</li>
<li><strong>Strategy</strong> pattern makes a family algorithm and encapsulates each algorithm.</li>
<li>Proxy pattern makes a family algorithm and encapsulates each algorithm. <strong>false</strong></li>
</ul>
<h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul>
<li><strong>Composer</strong> is a dependency manager used by Laravel.</li>
<li>Laravel uses <strong>MVC</strong> approach.</li>
<li>Which of the following ORM is shipped with Laravel? <strong>Eloquent</strong></li>
<li>In a laravel project, route file is called as <strong>web.php</strong>.</li>
<li>In Laravel, routes use a special type of syntax known as <strong>closure</strong>.</li>
<li>In Laravel route file is located <strong>insides routes/directory</strong>.</li>
<li>In laravel, view files are written in <strong>blade</strong> syntax.</li>
<li>In Laravel, a model file will be written as <strong>php</strong> code.</li>
</ul>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ul>
<li>jQuery is a framework/library. <strong>true</strong></li>
<li>jQuery is a client-side framework. <strong>true</strong></li>
<li>In jQuery <strong>$</strong> is used to select an HTML element, attribute, class or an id.</li>
<li>The jQuery declaration $(“p.test”).hide() will <strong>hide only the paragraphs that have a class = “test”</strong>.</li>
</ul>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li>Which of the following frameworks is not open-source? <strong>ASP.NET</strong></li>
<li>Which of the following can be described as a technique that lets a developer query and manipulate data from a database using an object-oriented paradigm? <strong>ORM</strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ISYS1126 </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[INTE2401 Cloud Security Week 2 Notes]]></title>
      <url>/2017/07/28/INTE2401%20Cloud%20Security/Week-2/</url>
      <content type="html"><![CDATA[<p>Implementation of a Spartan Scytale Cipher in javascript.</p>
<a id="more"></a>
<p>Ok, so this is a pretty straight forward cipher.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> string = process.argv[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">const</span> run = <span class="function"><span class="params">columns</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> rows = <span class="built_in">Math</span>.ceil(string.length / columns);</div><div class="line"></div><div class="line">  process.stdout.write(<span class="string">`<span class="subst">$&#123;columns&#125;</span>: "`</span>);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; columns; col++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</div><div class="line">      <span class="keyword">let</span> i = row * columns + col;</div><div class="line">      <span class="keyword">let</span> char = i &lt; string.length ? string[i] : <span class="string">"_"</span>;</div><div class="line">      process.stdout.write(char);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  process.stdout.write(<span class="string">'"\n'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`\nNumber of columns`</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> columns = <span class="number">2</span>; columns &lt;= <span class="number">9</span>; columns++) run(columns);</div></pre></td></tr></table></figure>
<p>Testing that output it looks correct.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node encode "Cloud Security"</span></div><div class="line"></div><div class="line">Number of columns</div><div class="line">2: <span class="string">"CodScrtlu euiy"</span></div><div class="line">3: <span class="string">"CuSutlderyo ci_"</span></div><div class="line">4: <span class="string">"Cdctl uyoSr_uei_"</span></div><div class="line">5: <span class="string">"C rlSioetucydu_"</span></div><div class="line">6: <span class="string">"CStleyoc_uu_dr_ i_"</span></div><div class="line">7: <span class="string">"Celcouurdi tSy"</span></div><div class="line">8: <span class="string">"Ccluoruidt yS_e_"</span></div><div class="line">9: <span class="string">"Culroiutdy _S_e_c_"</span></div></pre></td></tr></table></figure>
<p>Lets go with 7 columns, which is “Celcouurdi tSy”</p>
<hr>
<p>The decode process is the mirror, except we iterate over the columns rather than rows. Also if we assume that the cipher will be padded, then we don’t need to bother with ciphers where the characters divided by columns has a remainder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> string = process.argv[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">const</span> run = <span class="function"><span class="params">columns</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> rows = <span class="built_in">Math</span>.ceil(string.length / columns);</div><div class="line">  <span class="keyword">if</span> (rows !== string.length / columns) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  process.stdout.write(<span class="string">`<span class="subst">$&#123;columns&#125;</span>: `</span>);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; columns; col++) &#123;</div><div class="line">      <span class="keyword">let</span> i = col * rows + row;</div><div class="line">      process.stdout.write(string[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  process.stdout.write(<span class="string">"\n"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`\nNumber of columns`</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> columns = <span class="number">2</span>; columns &lt;= <span class="number">9</span>; columns++) run(columns);</div></pre></td></tr></table></figure>
<p>Looking at the output it appears to work.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node decode "Celcouurdi tSy"</span></div><div class="line"></div><div class="line">Number of columns</div><div class="line">2: Credlic otuSuy</div><div class="line">7: Cloud Security</div></pre></td></tr></table></figure>
<hr>
<p>I did some more testing to verify my results against examples I found online, but this is limit of what I wanted to post.</p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> INTE2401 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 2 Quiz]]></title>
      <url>/2017/07/27/COSC1285%20Algorithms/Quiz-2/</url>
      <content type="html"><![CDATA[<p>Answers to the online Algorithms and Analysis quiz.</p>
<a id="more"></a>
<p>What is the average case, and why is it considered difficult to analyse?</p>
<p><strong>Average case is the average across all possible inputs.  Generally, the number of possible inputs is extremely large, making it difficult to consider all possibilities.</strong></p>
<hr>
<p>What is the input size and basic operation of the following algorithm?<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: <span class="keyword">Array</span> A[<span class="number">0</span>,<span class="number">1</span>,...,n-<span class="number">1</span>] (<span class="keyword">array</span> <span class="keyword">of</span> size n)</div><div class="line">Output: s = A[<span class="number">0</span>] * A[<span class="number">1</span>] * ... A[n-<span class="number">1</span>] (multiplication <span class="keyword">of</span> <span class="keyword">all</span> the elements)</div><div class="line"><span class="number">1</span>: Set s = <span class="number">1</span></div><div class="line"><span class="number">2</span>: <span class="keyword">for</span> i = <span class="number">0</span> to n-<span class="number">1</span> <span class="keyword">do</span></div><div class="line"><span class="number">3</span>:    s = s * A[i]</div><div class="line"><span class="number">4</span>: <span class="keyword">end</span> <span class="keyword">for</span></div><div class="line"><span class="number">5</span>: <span class="keyword">return</span> s</div></pre></td></tr></table></figure></p>
<p><strong>Answer: n and multiplication</strong></p>
<hr>
<p>Consider the following pseudo code for an algorithm.<br>What is C(n), the number of times the basic operation of addition is computed in the above algorithm?<br><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></div><div class="line">  <span class="keyword">for</span> j = <span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></div><div class="line">    X = X + <span class="number">1</span></div><div class="line">  <span class="keyword">end</span> <span class="keyword">for</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span></div></pre></td></tr></table></figure></p>
<p><strong>Answer</strong> <img src="/images/cosc1285/sum2_1.gif" alt=""></p>
<hr>
<p>Given $t(n) = 3n^3$, which of the following functions g(n) satisfy $t(n) ∈ Θ(g(n))$?  Select one or more answers.</p>
<p><strong>Answer: $g(n) = n^3$</strong></p>
<hr>
<p>Given $t(n) = 3n^3$, which of the following functions g(n) satisfy $t(n) ∈ Ω(g(n))$?  Select one or more answers.</p>
<p><strong>Answer</strong></p>
<ul>
<li>$g(n) = log(n)$</li>
<li>$g(n) = n$</li>
<li>$g(n) = n^2$</li>
<li>$g(n) = n^3$</li>
<li>$g(n) = e^n$</li>
<li>$g(n) = n!$</li>
</ul>
<hr>
<p>Which of the following functions are considered to be in $Ω(log(n))$?  i.e., for each function t(n), determine if $t(n) ∈ Ω(log(n))$.  Select one or more answers.</p>
<p><strong>Answer</strong></p>
<ul>
<li>$t(n) = log(n)$</li>
<li>$t(n) = n$</li>
<li>$t(n) = n^2$</li>
<li>$t(n) = n^3$</li>
<li>$t(n) = e^n$</li>
<li>$t(n) = n!$</li>
</ul>
<hr>
<p>Which of the following functions are considered to be in $Θ(n^2)$?  i.e., for each function t(n), determine if $t(n) ∈ Θ(n^2)$.  Select one or more answers.</p>
<p><strong>Answer: $n^2$</strong></p>
<hr>
<p>For the following algorithm, in the worst case, how many times is the basic operation of equality (==) executed on an array of size n?<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Input: array A[<span class="number">0</span>,<span class="number">1</span>,...,n<span class="number">-1</span>] (<span class="keyword">of</span> size n), search <span class="keyword">key</span> K</div><div class="line">Output: a list <span class="keyword">of</span> indices <span class="keyword">of</span> A whose corresponding elements match <span class="keyword">key</span> K.</div><div class="line">        <span class="keyword">If</span> no matches, empty <span class="keyword">set</span> <span class="keyword">is</span> returned.</div><div class="line"><span class="number">1</span>: i = <span class="number">0</span></div><div class="line"><span class="number">2</span>: found = list()</div><div class="line"><span class="number">3</span>: <span class="keyword">while</span> i &lt; n <span class="keyword">do</span></div><div class="line"><span class="number">4</span>:    <span class="keyword">if</span> (A[i] == K) <span class="keyword">then</span></div><div class="line"><span class="number">5</span>:       found.append(i)</div><div class="line"><span class="number">6</span>:    <span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"><span class="number">7</span>:    i += <span class="number">1</span></div><div class="line"><span class="number">4</span>: <span class="keyword">end</span> <span class="keyword">while</span></div><div class="line"><span class="number">5</span>: <span class="keyword">return</span> found</div></pre></td></tr></table></figure></p>
<p><strong>Answer: n</strong></p>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQuery-like DOM Selector]]></title>
      <url>/2017/07/27/JQuery-like%20DOM%20Selector/</url>
      <content type="html"><![CDATA[<p>I was watching a Play-by-Play video with Lea Verou on Pluralsight and she used to following function to create JQuery like syntax to select DOM nodes. I thought it was good enough to share.</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector, container</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (container || <span class="built_in">document</span>).querySelector(selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now I can attach event listeners to an DOM node in the following format;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'button.foo'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Pretty cool.</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 2 Notes]]></title>
      <url>/2017/07/27/COSC1285%20Algorithms/Week-2/</url>
      <content type="html"><![CDATA[<p>Notes from lectures on Big O and Big Omega notation for grouping algorithms by orders of growth.</p>
<a id="more"></a>
<h3 id="Common-Equivalence-Classes"><a href="#Common-Equivalence-Classes" class="headerlink" title="Common Equivalence Classes"></a>Common Equivalence Classes</h3><p>Table of common usage is in textbook page 59 (pdf 87)</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Big O</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>Constant</td>
<td>$O(1)$</td>
<td>Access array element</td>
</tr>
<tr>
<td>Logarithmic</td>
<td>$O(\log{n})$</td>
<td>Binary search</td>
</tr>
<tr>
<td>Linear</td>
<td>$O(n)$</td>
<td>Link list search</td>
</tr>
<tr>
<td>Linearithmic (Supralinear)</td>
<td>$O(n\log{n})$</td>
<td>Merge sorting</td>
</tr>
<tr>
<td>Quadratic</td>
<td>$O(n^2)$</td>
<td>Selection sorting</td>
</tr>
<tr>
<td>Exponential</td>
<td>$O(2^n)$</td>
<td>Generating all subsets</td>
</tr>
<tr>
<td>Factorial</td>
<td>$O(n!)$</td>
<td>Generating all permutations</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Upper-and-Lower-Bound-Examples"><a href="#Upper-and-Lower-Bound-Examples" class="headerlink" title="Upper and Lower Bound Examples"></a>Upper and Lower Bound Examples</h3><ul>
<li>$O$ Upper Bound. Equal or lower order of growth.</li>
<li>$\Omega$ Lower Bound. Equal or higher order of growth</li>
</ul>
<p>Explanation of these is in textbook page 52 (pdf 80)</p>
<p>Therefore the lecture examples;</p>
<table>
<thead>
<tr>
<th>$t(n)$</th>
<th style="text-align:center">$O(n)$</th>
<th style="text-align:center">$O(n^2)$</th>
<th style="text-align:center">$O(n^3)$</th>
<th style="text-align:center">$\Omega{(n)}$</th>
<th style="text-align:center">$\Omega{(n^2)}$</th>
<th style="text-align:center">$\Omega{(n^3)}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\log_2{n}$</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$10n+5$</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$\frac{n(n-1)}{2}$</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>$(n+1)^3$</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
</tr>
<tr>
<td>$2^n$</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
<td style="text-align:center"><strong>T</strong></td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 1 Quiz]]></title>
      <url>/2017/07/20/COSC1285%20Algorithms/Quiz-1/</url>
      <content type="html"><![CDATA[<p>Answers to the online Algorithms and Analysis quiz.</p>
<a id="more"></a>
<p>Consider the following undirected graph.<br><img src="/images/cosc1285/graph1_1.jpg" alt=""><br>The adjacency list representation of the above graph is partially filled in.  </p>
<ul>
<li>A -&gt; B, C, D</li>
<li>B -&gt; A</li>
<li>C -&gt; ?</li>
<li>D -&gt; A</li>
</ul>
<p>What is the adjacency list of vertex C?  If A, B, C, D are neighbours of C, then specify your answer as “A,B,C,D” in the answers.  Note, the list should be in ascending order.<br><strong>Answer: A, C</strong></p>
<hr>
<p>Consider the following directed graph.<br><img src="/images/cosc1285/graph1_2.jpg" alt=""><br>The adjacency matrix representation of the above graph is partially filled in.  What are the values for the 4 missing values?</p>
<table>
<thead>
<tr>
<th>A</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>0</td>
<td><strong>v</strong></td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>B</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>C</td>
<td><strong>x</strong></td>
<td>0</td>
<td><strong>y</strong></td>
<td>0</td>
</tr>
<tr>
<td>D</td>
<td>1</td>
<td>0</td>
<td><strong>z</strong></td>
<td>0</td>
</tr>
</tbody>
</table>
<p><strong>Answer: v = 0, x = 0, y = 1, z = 0</strong></p>
<hr>
<p>Which of the following is not a dictionary?   The answers are specified as a collection of (key,value) pairs.<br><strong>Answer: [(a, 1), (c, 3), (e, 1), (a, 2), (b, 3)]</strong></p>
<hr>
<p>Consider the queue of [a, b, a, c, d, e], where the leftmost element is the front of the queue, i.e., ‘a’, and the rightmost element is the back of the queue, i.e., ‘e’.  After the following operations, dequeue, enqueue ‘f’, dequeue was executed on this queue, what is the updated queue?<br><strong>Answer: [a, c, d, e, f]</strong></p>
<hr>
<p>Consider the stack of [a, b, a, c, d, e], where the leftmost element is the top of the stack, i.e., ‘a’ and the rightmost element is the bottom of the stack, i.e., ‘e’.  After the following operations, pop, push f, pop was executed on this stack, what is the updated stack?<br><strong>Answer: [b, a, c, d, e]</strong></p>
<hr>
<p>The main difference between (normal) queues and priority queues is that the latter considers priority.  When dequeuing, priority queues removes the element with the  ?  priority, while for normal queues, they remove the element at the front of the queue.  Select what ? should be.<br><strong>Answer: highest</strong></p>
<hr>
<p>Which of the following collections are sequences?  If ordering is important in the collection, it will be labelled “ordered” after it, otherwise if ordering is not important, it will be labelled “unordered”.  There can be 1 or more answers - you need to select all the correct answers.</p>
<ul>
<li><strong>[car, bar, rar, par] (ordered)</strong></li>
<li><strong>[a, c, b, d] (ordered)</strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COSC1285 Algorithms Week 1 Notes]]></title>
      <url>/2017/07/20/COSC1285%20Algorithms/Week-1/</url>
      <content type="html"><![CDATA[<p>Some Javascript implementations of two algorithms from the <strong><em>Introduction to the Design and Analysis of Algorithms</em></strong> textbook.</p>
<a id="more"></a>
<h3 id="ALGORITHM-Euclid-m-n"><a href="#ALGORITHM-Euclid-m-n" class="headerlink" title="ALGORITHM Euclid(m, n)"></a>ALGORITHM Euclid(m, n)</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//Computes gcd(m, n) by Euclid’s algorithm</div><div class="line">//Input: Two nonnegative,<span class="built_in"> not-both-zero </span>integers m<span class="built_in"> and </span>n</div><div class="line">//Output: Greatest common divisor of m<span class="built_in"> and </span>n</div><div class="line">while n = 0 do</div><div class="line">  r ← m mod n</div><div class="line">  m ← n</div><div class="line">  n ← r<span class="built_in"></span></div><div class="line">return m</div></pre></td></tr></table></figure>
<p>In javascript this would look like this. We can make use of an implicit return and ternary function to have a rather compact one-liner.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">m, n</span>) =&gt;</span> (n &gt; <span class="number">0</span> ? gcd(n, m % n) : m);</div><div class="line"><span class="built_in">console</span>.log(gcd(process.argv[<span class="number">2</span>], process.argv[<span class="number">3</span>]));</div></pre></td></tr></table></figure>
<p>Testing the output it appears to work.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node gcd.js 60 24</span></div><div class="line">12</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="ALGORITHM-Sieve-n"><a href="#ALGORITHM-Sieve-n" class="headerlink" title="ALGORITHM Sieve(n)"></a>ALGORITHM Sieve(n)</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Implements <span class="keyword">the</span> sieve <span class="keyword">of</span> Eratosthenes<span class="comment"></span></div><div class="line">//Input: A positive integer n &gt; 1<span class="comment"></span></div><div class="line">//Output: Array L of all prime numbers less than or equal to n</div><div class="line"><span class="number">1.1</span> What Is <span class="keyword">an</span> Algorithm? <span class="number">7</span></div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> n <span class="built_in">do</span> A[p] ← p</div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> √n <span class="built_in">do</span><span class="comment"> //see note before pseudocode</span></div><div class="line">  <span class="keyword">if</span> A[p] = <span class="number">0</span><span class="comment"> //p hasn’t been eliminated on previous passes</span></div><div class="line">    j ← p ∗ p</div><div class="line">    <span class="keyword">while</span> j ≤ n <span class="built_in">do</span></div><div class="line">      A[j] ← <span class="number">0</span><span class="comment"> //mark element as eliminated</span></div><div class="line">      j ← j + p<span class="comment"></span></div><div class="line">//copy the remaining elements of A to array L of the primes</div><div class="line">i ← <span class="number">0</span></div><div class="line"><span class="keyword">for</span> p ← <span class="number">2</span> <span class="built_in">to</span> n <span class="built_in">do</span></div><div class="line">  <span class="keyword">if</span> A[p] = <span class="number">0</span></div><div class="line">    L[i]← A[p]</div><div class="line">    i ← i + <span class="number">1</span></div><div class="line"><span class="literal">return</span> L</div></pre></td></tr></table></figure>
<p>If I was trying to create a function to find primes, I would like to do this differently (say with a linked list), but I wanted to implement the example exactly. I also ignored the section at the end to copy the array to a new array L because it isn’t necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sieve = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> array = [];</div><div class="line">  <span class="keyword">const</span> limit = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(n));</div><div class="line">  <span class="keyword">const</span> iterations = &#123;</div><div class="line">    <span class="attr">outerLoop</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">innerLoop</span>: <span class="number">0</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">let</span> j, p;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (p = <span class="number">2</span>; p &lt;= n; p++) array[p] = p;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (p = <span class="number">2</span>; p &lt;= limit; p++) &#123;</div><div class="line">    iterations.outerLoop++;</div><div class="line">    <span class="keyword">if</span> (array[p]) &#123;</div><div class="line">      j = p * p;</div><div class="line">      <span class="keyword">while</span> (j &lt;= n) &#123;</div><div class="line">        iterations.innerLoop++;</div><div class="line">        array[j] = <span class="number">0</span>;</div><div class="line">        j += p;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(iterations);</div><div class="line">  <span class="keyword">return</span> array.filter(<span class="function"><span class="params">value</span> =&gt;</span> value);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sieve(process.argv[<span class="number">2</span>]).join(<span class="string">", "</span>));</div></pre></td></tr></table></figure>
<p>And it appears to work. Fantastic :)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># node sieve.js 100</span></div><div class="line">&#123; outerLoop: 9, innerLoop: 104 &#125;</div><div class="line">2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Uni Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> COSC1285 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Passport.js Simple Example]]></title>
      <url>/2017/07/02/Passport-js-Simple-Example/</url>
      <content type="html"><![CDATA[<p>This is a simple example to demonstrate <a href="http://passportjs.org/" target="_blank" rel="external">Passport.js</a> using a basic local strategy.</p>
<a id="more"></a>
<h2 id="Create-new-project"><a href="#Create-new-project" class="headerlink" title="Create new project"></a>Create new project</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i -S express passport passport-http mocha</div><div class="line">touch server.js test.js</div><div class="line">npm init -y</div></pre></td></tr></table></figure>
<h2 id="Create-Server-boilerplate"><a href="#Create-Server-boilerplate" class="headerlink" title="Create Server boilerplate"></a>Create Server boilerplate</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">"passport"</span>);</div><div class="line"><span class="keyword">const</span> BasicStrategy = <span class="built_in">require</span>(<span class="string">"passport-http"</span>).BasicStrategy;</div><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">"express"</span>)();</div><div class="line"></div><div class="line">passport.use(</div><div class="line">  <span class="keyword">new</span> BasicStrategy(<span class="function">(<span class="params">userid, password, done</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Replace with database check</span></div><div class="line">    <span class="keyword">if</span> (userid !== <span class="string">"foo"</span> || password !== <span class="string">"bar"</span>) &#123;</div><div class="line">      <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, &#123; <span class="attr">username</span>: <span class="string">"Foobar"</span> &#125;);</div><div class="line">  &#125;)</div><div class="line">);</div><div class="line"></div><div class="line">app.get(<span class="string">"/"</span>, passport.authenticate(<span class="string">"basic"</span>, &#123; <span class="attr">session</span>: <span class="literal">false</span> &#125;), (req, res) =&gt; &#123;</div><div class="line">  res.send(req.user);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"listening"</span>) &#125;);</div></pre></td></tr></table></figure>
<h2 id="Build-our-test-cases"><a href="#Build-our-test-cases" class="headerlink" title="Build our test cases"></a>Build our test cases</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test.js</span></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">"assert"</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line">describe(<span class="string">"Test"</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">"should reject no username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(<span class="string">"http://localhost:8080"</span>, res =&gt; &#123;</div><div class="line">      assert.equal(<span class="number">401</span>, res.statusCode);</div><div class="line">      done();</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">"should reject incorrect username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(</div><div class="line">      &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">        <span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">        <span class="attr">auth</span>: <span class="string">"foo:foo"</span></div><div class="line">      &#125;,</div><div class="line">      res =&gt; &#123;</div><div class="line">        assert.equal(<span class="number">401</span>, res.statusCode);</div><div class="line">        done();</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">"should accept correct username/password"</span>, done =&gt; &#123;</div><div class="line">    http.get(</div><div class="line">      &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">        <span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">        <span class="attr">auth</span>: <span class="string">"foo:bar"</span></div><div class="line">      &#125;,</div><div class="line">      res =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> json = &#123;&#125;;</div><div class="line">        <span class="keyword">let</span> data = <span class="string">""</span>;</div><div class="line">        res.on(<span class="string">"data"</span>, chunk =&gt; &#123; data += chunk &#125;);</div><div class="line">        res.on(<span class="string">"end"</span>, () =&gt; &#123;</div><div class="line">          json = <span class="built_in">JSON</span>.parse(data);</div><div class="line">          assert.equal(<span class="number">200</span>, res.statusCode);</div><div class="line">          assert.equal(<span class="string">"Foobar"</span>, json.username);</div><div class="line">          done();</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Start-server"><a href="#Start-server" class="headerlink" title="Start server"></a>Start server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<h2 id="Test-requests"><a href="#Test-requests" class="headerlink" title="Test requests"></a>Test requests</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">test</span></div><div class="line">Test</div><div class="line">  √ should reject no username/password</div><div class="line">  √ should reject incorrect username/password</div><div class="line">  √ should accept correct username/password</div><div class="line">$ curl localhost:8080</div><div class="line">Unauthorized</div><div class="line">$ curl localhost:8080 --user foo:bar</div><div class="line">&#123;<span class="string">"username"</span>:<span class="string">"Foobar"</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Next…"><a href="#Next…" class="headerlink" title="Next…"></a>Next…</h2><p>Go back to the TODO in BasicStrategy and replace with database call.<br>Also don’t forget that you can dump the header with <code>curl -D - localhost:8080 --user foo:bar</code></p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> password.js </tag>
            
            <tag> express </tag>
            
            <tag> mocha </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Hexagonal Solutions]]></title>
      <url>/2017/06/25/Regex%20Crossword/Regex-Crossword-Hexagonal-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Buzz-Buzz"><a href="#Buzz-Buzz" class="headerlink" title="Buzz Buzz"></a>Buzz Buzz</h2><p>Hive<br><img src="/images/regex/hex1.JPG" alt=""></p>
<h2 id="Garden"><a href="#Garden" class="headerlink" title="Garden"></a>Garden</h2><p>Flower<br><img src="/images/regex/hex2.JPG" alt=""></p>
<h2 id="Pollen"><a href="#Pollen" class="headerlink" title="Pollen"></a>Pollen</h2><p>Birds and Bees<br><img src="/images/regex/hex3.JPG" alt=""></p>
<h2 id="Stationary"><a href="#Stationary" class="headerlink" title="Stationary"></a>Stationary</h2><p>Bee = Move Very Fast To Stay Still<br><img src="/images/regex/hex4.JPG" alt=""></p>
<h2 id="Winnie"><a href="#Winnie" class="headerlink" title="Winnie"></a>Winnie</h2><p>I’ve been thinking these are the wrong sort of bees<br><img src="/images/regex/hex5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Player Puzzle Solutions]]></title>
      <url>/2017/06/25/Regex%20Crossword/Regex-Crossword-Player-Puzzle-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Binary-by-Player-6450"><a href="#Binary-by-Player-6450" class="headerlink" title="Binary (by Player #6450)"></a>Binary (by Player #6450)</h2><p><img src="/images/regex/player1.JPG" alt=""></p>
<h2 id="Single-Cell-Organism-by-Player-20428"><a href="#Single-Cell-Organism-by-Player-20428" class="headerlink" title="Single Cell Organism (by Player #20428)"></a>Single Cell Organism (by Player #20428)</h2><p><img src="/images/regex/player2.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How well do you know Node.js?]]></title>
      <url>/2017/06/25/How-well-do-you-know-Node-js/</url>
      <content type="html"><![CDATA[<p><a href="https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8" target="_blank" rel="external">Here is the quiz</a>. The lesson is, read the <a href="https://nodejs.org/en/docs/" target="_blank" rel="external">documentation</a>.</p>
<a id="more"></a>
<hr>
<h3 id="How-come-when-you-declare-a-global-variable-in-any-Node-js-file-it’s-not-really-global-to-all-modules"><a href="#How-come-when-you-declare-a-global-variable-in-any-Node-js-file-it’s-not-really-global-to-all-modules" class="headerlink" title="How come when you declare a global variable in any Node.js file it’s not really global to all modules?"></a>How come when you declare a global variable in any Node.js file it’s not really global to all modules?</h3><p>Node wraps any required code in the below function. The idea is to keep each module in its own sandbox. These is a way to do globals, by <code>global.foo = 5</code>, but it’s not recommended practice.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line">  <span class="comment">// module code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/globals.html#globals_global_objects" target="_blank" rel="external">Node Docs on globals</a></li>
<li><a href="https://nodejs.org/api/modules.html#modules_the_module_wrapper" target="_blank" rel="external">Node Docs on the module wrapper</a></li>
</ul>
<hr>
<h3 id="When-exporting-the-API-of-a-Node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports"><a href="#When-exporting-the-API-of-a-Node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports" class="headerlink" title="When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?"></a>When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?</h3><p>exports is initially just an alias for module.exports. So if you write <code>exports.foo = &#39;bar&#39;</code>, it is actually <code>module.exports = { foo: &#39;bar&#39;}</code>. However if you want to export a function or an object instead of just key-value pairs, you can override the exports alias. So using <code>module.exports = function foo() {}</code> will cause exports and module.exports to no longer reference the same object.</p>
<hr>
<h3 id="Can-we-require-local-files-without-using-relative-paths"><a href="#Can-we-require-local-files-without-using-relative-paths" class="headerlink" title="Can we require local files without using relative paths?"></a>Can we require local files without using relative paths?</h3><p>Lots of different ways. This is probably the simplest.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">global.__base = __dirname + <span class="string">'/'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bar/whatever.js</span></div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(__base + <span class="string">'foo/whatever'</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://gist.github.com/branneman/8048520" target="_blank" rel="external">Gist with different options</a></li>
</ul>
<hr>
<h3 id="What-is-the-Event-Loop-Is-it-part-of-V8"><a href="#What-is-the-Event-Loop-Is-it-part-of-V8" class="headerlink" title="What is the Event Loop? Is it part of V8?"></a>What is the Event Loop? Is it part of V8?</h3><p>It is Node’s method of implementing event-driven programming. A piece of code subscribes to an event, and registers a callback to fire when that event is emitted. It isn’t part of V8, it is part of libuv and runs on a different thread.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foo.js</span></div><div class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    self.emit(<span class="string">'event'</span>, <span class="string">'foo!'</span>)</div><div class="line">  &#125;, <span class="number">2000</span>)</div><div class="line">&#125;;</div><div class="line">util.inherits(Foo, EventEmitter);</div><div class="line"><span class="built_in">module</span>.exports = Foo;</div><div class="line"></div><div class="line"><span class="comment">// bar.js</span></div><div class="line"><span class="keyword">const</span> Foo = <span class="built_in">require</span>(<span class="string">'./foo.js'</span>)</div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo()</div><div class="line">foo.on(<span class="string">'event'</span>, (message) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(message)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="external">Node docs on the event Loop</a></li>
</ul>
<hr>
<h3 id="What-is-the-Call-Stack-Is-it-part-of-V8"><a href="#What-is-the-Call-Stack-Is-it-part-of-V8" class="headerlink" title="What is the Call Stack? Is it part of V8?"></a>What is the Call Stack? Is it part of V8?</h3><p>It is a list of functions that are to be processed in FILO order. It is a part of V8.</p>
<hr>
<h3 id="What-is-the-difference-between-setImmediate-and-process-nextTick"><a href="#What-is-the-difference-between-setImmediate-and-process-nextTick" class="headerlink" title="What is the difference between setImmediate and process.nextTick?"></a>What is the difference between setImmediate and process.nextTick?</h3><p><code>setImmediate</code> puts the callback at the end of the event queue, so it will be processed after the current poll phase completes (during the check phase).</p>
<p><code>process.nextTick</code> puts the callback at the beginning of the event queue, so it will be processed after the current operation, regardless of the current phase of the event loop.</p>
<ul>
<li><a href="https://nodejs.org/api/timers.html#timers_scheduling_timers" target="_blank" rel="external">Node Docs on Times</a></li>
</ul>
<hr>
<h3 id="How-do-you-make-an-asynchronous-function-return-a-value"><a href="#How-do-you-make-an-asynchronous-function-return-a-value" class="headerlink" title="How do you make an asynchronous function return a value?"></a>How do you make an asynchronous function return a value?</h3><p>Return the value as part of resolving a promise.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; resolve(<span class="string">'bar'</span>) &#125;, <span class="number">2000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> foo()</div><div class="line">  <span class="built_in">console</span>.log(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://ponyfoo.com/articles/understanding-javascript-async-await" target="_blank" rel="external">Ponyfoo article on async/await with promises</a></li>
</ul>
<hr>
<h3 id="Can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other"><a href="#Can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other" class="headerlink" title="Can callbacks be used with promises or is it one way or the other?"></a>Can callbacks be used with promises or is it one way or the other?</h3><p>You can use both. I like the below pattern.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (callback) &#123;</div><div class="line">    callback()</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span> <span class="comment">// Or something else</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// whatever</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="What-are-the-major-differences-between-spawn-exec-and-fork"><a href="#What-are-the-major-differences-between-spawn-exec-and-fork" class="headerlink" title="What are the major differences between spawn, exec, and fork?"></a>What are the major differences between spawn, exec, and fork?</h3><p>spawn will ‘spawn’ a shell, execute a command within that shell and stream back the process output to the parent.</p>
<p>exec works the same as spawn except that its buffers the process output. Better suited for simple tasks.</p>
<p>fork starts a new Node process, with parent and child communicating through events. This is not the same as forking on Linux.</p>
<ul>
<li><a href="https://nodejs.org/api/child_process.html#child_process_child_process" target="_blank" rel="external">Node Docs on child processes</a></li>
</ul>
<hr>
<h3 id="How-does-the-cluster-module-work-How-is-it-different-than-using-a-load-balancer"><a href="#How-does-the-cluster-module-work-How-is-it-different-than-using-a-load-balancer" class="headerlink" title="How does the cluster module work? How is it different than using a load balancer?"></a>How does the cluster module work? How is it different than using a load balancer?</h3><p>The cluster module forks multiple child processes. When the parent process receives a task, such as a http request, it chooses a child process to be responsible for that task. The difference between clustering and load balancing is that load balancing is done to distribute connections across multiple hosts, whereas clustering is done a single host.</p>
<ul>
<li><a href="https://nodejs.org/api/cluster.html#cluster_how_it_works" target="_blank" rel="external">Node Docs on the cluster module</a></li>
</ul>
<hr>
<h3 id="What-are-the-–harmony-flags"><a href="#What-are-the-–harmony-flags" class="headerlink" title="What are the –harmony-* flags?"></a>What are the –harmony-* flags?</h3><p>Enables a staged V8 feature. This is a feature the V8 team has implemented but isn’t on by default due to it being almost but not yet complete. Use <code>node --v8-options | grep &quot;in progress&quot;</code> to list them.</p>
<hr>
<h3 id="How-can-you-read-and-inspect-the-memory-usage-of-a-Node-js-process"><a href="#How-can-you-read-and-inspect-the-memory-usage-of-a-Node-js-process" class="headerlink" title="How can you read and inspect the memory usage of a Node.js process?"></a>How can you read and inspect the memory usage of a Node.js process?</h3><p>Yes, either with any process manager outside Node, or using <code>process.memoryUsage()</code> inside Node.</p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_process_memoryusage" target="_blank" rel="external">Node Docs on process.memoryUsage()</a></li>
</ul>
<hr>
<h3 id="Can-reverse-search-in-commands-history-be-used-inside-Node’s-REPL"><a href="#Can-reverse-search-in-commands-history-be-used-inside-Node’s-REPL" class="headerlink" title="Can reverse-search in commands history be used inside Node’s REPL?"></a>Can reverse-search in commands history be used inside Node’s REPL?</h3><p>Not on Windows (as far as I know). On Linux, you install <a href="https://github.com/hanslub42/rlwrap" target="_blank" rel="external">rlwrap</a>, then run Node REPL as <code>NODE_NO_READLINE=1 rlwrap node</code>. Honestly not worth the effort.</p>
<hr>
<h3 id="What-are-V8-object-and-function-templates"><a href="#What-are-V8-object-and-function-templates" class="headerlink" title="What are V8 object and function templates?"></a>What are V8 object and function templates?</h3><p>Function templates are blueprints for a single Javascript function. This is how you embed Javascript in a native C++ environment.</p>
<p>Object templates are associated with function templates. They configure the objects that are created by the function template.</p>
<ul>
<li><a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide#templates" target="_blank" rel="external">V8 Wiki on templates</a></li>
</ul>
<hr>
<h3 id="What-is-libuv-and-how-does-Node-js-use-it"><a href="#What-is-libuv-and-how-does-Node-js-use-it" class="headerlink" title="What is libuv and how does Node.js use it?"></a>What is libuv and how does Node.js use it?</h3><p>Node uses libuv to abstract the non-blocking I/O operations, so Node can be cross platform. It handles file system operations, TCP/UDP sockets, child processes etc. It is what provides Node with the Event loop.</p>
<hr>
<h3 id="How-can-you-make-Node’s-REPL-always-use-JavaScript-strict-mode"><a href="#How-can-you-make-Node’s-REPL-always-use-JavaScript-strict-mode" class="headerlink" title="How can you make Node’s REPL always use JavaScript strict mode?"></a>How can you make Node’s REPL always use JavaScript strict mode?</h3><p>Globally you can always use <code>alias node=node --use_strict</code>, otherwise you can define your own repl.js such that;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> repl = <span class="built_in">require</span>(<span class="string">'repl'</span>);</div><div class="line"><span class="keyword">const</span> r = repl.start(&#123;</div><div class="line">  <span class="attr">replMode</span>: repl.REPL_MODE_STRICT</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="How-can-we-do-one-final-operation-before-a-Node-process-exits-Can-that-operation-be-done-asynchronously"><a href="#How-can-we-do-one-final-operation-before-a-Node-process-exits-Can-that-operation-be-done-asynchronously" class="headerlink" title="How can we do one final operation before a Node process exits? Can that operation be done asynchronously?"></a>How can we do one final operation before a Node process exits? Can that operation be done asynchronously?</h3><p>You can register a function for the exit event, but its synchronous. If you need your function to be asynchronous, use the beforeExit event like so;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; resolve(<span class="string">'bar'</span>) &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> foo();</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">&#125;</div><div class="line"></div><div class="line">process.once(<span class="string">"beforeExit"</span>, bar);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_event_beforeexit" target="_blank" rel="external">Node Docs on beforeExit event</a></li>
</ul>
<hr>
<h3 id="Besides-V8-and-libuv-what-other-external-dependencies-does-Node-have"><a href="#Besides-V8-and-libuv-what-other-external-dependencies-does-Node-have" class="headerlink" title="Besides V8 and libuv, what other external dependencies does Node have?"></a>Besides V8 and libuv, what other external dependencies does Node have?</h3><ol>
<li>http-parser - used parsing HTTP requests and responses.</li>
<li>c-ares - used for asynchronous DNS queries</li>
<li>OpenSSL - used for crypto functions</li>
<li>zlib - used for asynchronous compression and decompression</li>
</ol>
<ul>
<li><a href="https://nodejs.org/en/docs/meta/topics/dependencies/0" target="_blank" rel="external">Node Docs on dependencies</a></li>
</ul>
<hr>
<h3 id="What’s-the-problem-with-the-process-uncaughtException-event-How-is-it-different-than-the-exit-event"><a href="#What’s-the-problem-with-the-process-uncaughtException-event-How-is-it-different-than-the-exit-event" class="headerlink" title="What’s the problem with the process uncaughtException event? How is it different than the exit event?"></a>What’s the problem with the process uncaughtException event? How is it different than the exit event?</h3><p>On uncaughtException event, Node will default to printing the stack trace and exiting. If we register an event handler on the uncaughtException event, Node will not exit. Your event will in effect override the default. So you can produce some unexpected behaviour. Using this event is usually a sign that someone is using the wrong approach or isn’t handling their errors in the appropriate section of their program.</p>
<ul>
<li><a href="https://nodejs.org/api/process.html#process_event_uncaughtexception" target="_blank" rel="external">Node Docs on uncaughtException event</a></li>
</ul>
<hr>
<h3 id="Do-Node-buffers-use-V8-memory-Can-they-be-resized"><a href="#Do-Node-buffers-use-V8-memory-Can-they-be-resized" class="headerlink" title="Do Node buffers use V8 memory? Can they be resized?"></a>Do Node buffers use V8 memory? Can they be resized?</h3><p>No, they do not use V8 memory and they cannot be resized.</p>
<blockquote>
<p>Instances of the Buffer class are similar to arrays of integers but correspond to fixed-sized, raw memory allocations outside the V8 heap.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/buffer.html#buffer_buffer" target="_blank" rel="external">Node Docs on buffers</a></li>
</ul>
<hr>
<h3 id="What’s-the-difference-between-Buffer-alloc-and-Buffer-allocUnsafe"><a href="#What’s-the-difference-between-Buffer-alloc-and-Buffer-allocUnsafe" class="headerlink" title="What’s the difference between Buffer.alloc and Buffer.allocUnsafe?"></a>What’s the difference between Buffer.alloc and Buffer.allocUnsafe?</h3><p><code>Buffer.alloc</code> allocates a memory chunk and goes through an initialization process of setting all the cells to zero, then returning this wrapped in a Node Buffer object.</p>
<p><code>Buffer.allocUnsafe</code> does the same steps except for the initialization process. The unsafe part is that this could leak sensitive user information. The reason for both is that there may be applications where the initialization process produces too much overhead.</p>
<hr>
<h3 id="How-is-the-slice-method-on-buffers-different-from-that-on-arrays"><a href="#How-is-the-slice-method-on-buffers-different-from-that-on-arrays" class="headerlink" title="How is the slice method on buffers different from that on arrays?"></a>How is the slice method on buffers different from that on arrays?</h3><ol>
<li>Calling slice on an array returns an array but does not mutate the existing array.</li>
<li>Calling splice on an array returns an array and mutates the existing array.</li>
<li>Calling slice on a buffer returns a reference to the same chunk of memory, but offset and cropped. Mutating the data in that reference will mutate the data in the original buffer.</li>
</ol>
<ul>
<li><a href="https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end" target="_blank" rel="external">Node Docs on Buffer slice</a></li>
</ul>
<hr>
<h3 id="What-is-the-string-decoder-module-useful-for-How-is-it-different-than-casting-buffers-to-string"><a href="#What-is-the-string-decoder-module-useful-for-How-is-it-different-than-casting-buffers-to-string" class="headerlink" title="What is the string_decoder module useful for? How is it different than casting buffers to string"></a>What is the string_decoder module useful for? How is it different than casting buffers to string</h3><p>It is useful for decoding Buffer objects into strings. You can just call <code>buffer.toString()</code>, but string_decoder handles multibyte UTF-8 and UTF-16 characters.**</p>
<ul>
<li><a href="https://nodejs.org/api/string_decoder.html#string_decoder_string_decoder" target="_blank" rel="external">Node Docs on string_decoder</a></li>
</ul>
<hr>
<h3 id="What-are-the-5-major-steps-that-the-require-function-does"><a href="#What-are-the-5-major-steps-that-the-require-function-does" class="headerlink" title="What are the 5 major steps that the require function does?"></a>What are the 5 major steps that the require function does?</h3><ol>
<li>Resolving - Find the module in the file system</li>
<li>Loading - Determine its filetype</li>
<li>Wrapping - Wrap the function in Node’s module wrapper, so it is private but appears global.</li>
<li>Evaluating - Actually process the code</li>
<li>Caching - Store a copy in memory for if required again.</li>
</ol>
<ul>
<li><a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="external">Samer Buna’s (quiz author) article on require</a></li>
</ul>
<hr>
<h3 id="What-is-the-require-resolve-function-and-what-is-it-useful-for"><a href="#What-is-the-require-resolve-function-and-what-is-it-useful-for" class="headerlink" title="What is the require.resolve function and what is it useful for?"></a>What is the require.resolve function and what is it useful for?</h3><p>It invokes only the resolve step in the require process. It is useful to verify that a module exists, possibly for some optional package. You can see where Node will look with <code>console.log(module.paths)</code>.</p>
<hr>
<h3 id="What-is-the-main-property-in-package-json-useful-for"><a href="#What-is-the-main-property-in-package-json-useful-for" class="headerlink" title="What is the main property in package.json useful for?"></a>What is the main property in package.json useful for?</h3><p>It indicates the entry point to the program. So when your package is require, your main module’s export object is return. NPM needs to know where to look for your main module.</p>
<ul>
<li><a href="https://docs.npmjs.com/files/package.json#main" target="_blank" rel="external">npm Docs on package.json</a></li>
</ul>
<hr>
<h3 id="What-are-circular-modular-dependencies-in-Node-and-how-can-they-be-avoided"><a href="#What-are-circular-modular-dependencies-in-Node-and-how-can-they-be-avoided" class="headerlink" title="What are circular modular dependencies in Node and how can they be avoided?"></a>What are circular modular dependencies in Node and how can they be avoided?</h3><p>Circular dependencies are when A requires B, while B requires A. There are can be many more packages inbetween A and B which makes the chain hard to recognize. They are avoided in Node by returning a unfinished exports object to B, thus breaking the loop. They are avoided in real-world scenarios by having a treelike structure to a codebase where there are clear parent-child relationships that do not flow back up the tree.</p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_cycles" target="_blank" rel="external">Node Docs on module cycles</a></li>
</ul>
<hr>
<h3 id="What-are-the-3-file-extensions-that-will-be-automatically-tried-by-the-require-function"><a href="#What-are-the-3-file-extensions-that-will-be-automatically-tried-by-the-require-function" class="headerlink" title="What are the 3 file extensions that will be automatically tried by the require function?"></a>What are the 3 file extensions that will be automatically tried by the require function?</h3><p>.js, .json and .node in that order.</p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_file_modules" target="_blank" rel="external">Node Docs on File Modules</a></li>
</ul>
<hr>
<h3 id="When-creating-an-http-server-and-writing-a-response-for-a-request-why-is-the-end-function-required"><a href="#When-creating-an-http-server-and-writing-a-response-for-a-request-why-is-the-end-function-required" class="headerlink" title="When creating an http server and writing a response for a request, why is the end() function required?"></a>When creating an http server and writing a response for a request, why is the end() function required?</h3><p>Because the response object is a stream. Therefore we need to indicate to the receiver that we have finished writing data.</p>
<hr>
<h3 id="When-is-it-ok-to-use-the-file-system-Sync-methods"><a href="#When-is-it-ok-to-use-the-file-system-Sync-methods" class="headerlink" title="When is it ok to use the file system *Sync methods?"></a>When is it ok to use the file system *Sync methods?</h3><p>In applications where blocking is appropriate. For example, a CLI tool that performs synchronous operations would be appropriate. A web server that is handling multiple concurrent clients would not.</p>
<hr>
<h3 id="How-can-you-print-only-one-level-of-a-deeply-nested-object"><a href="#How-can-you-print-only-one-level-of-a-deeply-nested-object" class="headerlink" title="How can you print only one level of a deeply nested object?"></a>How can you print only one level of a deeply nested object?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">util.inspect(foo, &#123; <span class="attr">depth</span>: <span class="number">0</span> &#125;)</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://nodejs.org/api/util.html#util_util_inspect_object_options" target="_blank" rel="external">Node Docs on util.inspect</a></li>
</ul>
<hr>
<h3 id="What-is-the-node-gyp-package-used-for"><a href="#What-is-the-node-gyp-package-used-for" class="headerlink" title="What is the node-gyp package used for?"></a>What is the node-gyp package used for?</h3><p>gyp is a ‘meta-build system’. It generates other build systems. This enables cross platform support. Node uses gyp as node-gyp to compile addon modules as native.</p>
<hr>
<h3 id="The-objects-exports-require-and-module-are-all-globally-available-in-every-module-but-they-are-different-in-every-module-How"><a href="#The-objects-exports-require-and-module-are-all-globally-available-in-every-module-but-they-are-different-in-every-module-How" class="headerlink" title="The objects exports, require, and module are all globally available in every module but they are different in every module. How?"></a>The objects exports, require, and module are all globally available in every module but they are different in every module. How?</h3><p>Node wraps each module in the function below. So, exports, require and module appear to the module as global variables but actually they are module-specific.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line"><span class="comment">// Module code actually lives in here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_the_module_wrapper" target="_blank" rel="external">Node Docs on the module wrapper</a></li>
</ul>
<hr>
<h3 id="How-can-a-module-be-both-requirable-by-other-modules-and-executable-directly-using-the-node-command"><a href="#How-can-a-module-be-both-requirable-by-other-modules-and-executable-directly-using-the-node-command" class="headerlink" title="How can a module be both requirable by other modules and executable directly using the node command?"></a>How can a module be both requirable by other modules and executable directly using the node command?</h3><p>Using the following conditional.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</div><div class="line">  <span class="comment">// Executed directly</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// Required</span></div><div class="line">  <span class="built_in">module</span>.exports = foo</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://nodejs.org/api/modules.html#modules_accessing_the_main_module" target="_blank" rel="external">Node Docs on accessing the main module</a></li>
</ul>
<hr>
<h3 id="What’s-an-example-of-a-built-in-stream-in-Node-that-is-both-readable-and-writable"><a href="#What’s-an-example-of-a-built-in-stream-in-Node-that-is-both-readable-and-writable" class="headerlink" title="What’s an example of a built-in stream in Node that is both readable and writable?"></a>What’s an example of a built-in stream in Node that is both readable and writable?</h3><blockquote>
<p>A net.Socket is also a duplex stream, so it can be both readable and writable, and it is also a EventEmitter.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/net.html#net_class_net_socket" target="_blank" rel="external">Node docs on net module</a></li>
</ul>
<hr>
<h3 id="What’s-the-difference-between-using-event-emitters-and-using-simple-callback-functions-to-allow-for-asynchronous-handling-of-code"><a href="#What’s-the-difference-between-using-event-emitters-and-using-simple-callback-functions-to-allow-for-asynchronous-handling-of-code" class="headerlink" title="What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?"></a>What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?</h3><p>There are a few. The code being executed remains with the client code rather than being handed over, which has all sorts of implications if a variable needs to be changed. I suppose the most notably difference is multiple clients can subscribe to an event easily and all operate independently. To implement the same thing using a callback structure would be quite cumbersome, you’d have to store an array of callbacks. On the other hand, simple callback functions are just that, simple, and which makes events overkill for a whole bunch of usecases.</p>
<hr>
<h3 id="The-require-function-always-caches-the-module-it-requires-What-can-you-do-if-you-need-to-execute-the-code-in-a-required-module-many-times"><a href="#The-require-function-always-caches-the-module-it-requires-What-can-you-do-if-you-need-to-execute-the-code-in-a-required-module-many-times" class="headerlink" title="The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?"></a>The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'foo'</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./module.js'</span>)()</div></pre></td></tr></table></figure>
<hr>
<h3 id="What’s-the-difference-between-the-Paused-and-the-Flowing-modes-of-readable-streams"><a href="#What’s-the-difference-between-the-Paused-and-the-Flowing-modes-of-readable-streams" class="headerlink" title="What’s the difference between the Paused and the Flowing modes of readable streams?"></a>What’s the difference between the Paused and the Flowing modes of readable streams?</h3><blockquote>
<p>When in flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface.</p>
<p>In paused mode, the stream.read() method must be called explicitly to read chunks of data from the stream.</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/api/stream.html#stream_two_modes" target="_blank" rel="external">Node docs on streams</a></li>
</ul>
<hr>
<h3 id="What-does-the-–inspect-argument-do-for-the-node-command"><a href="#What-does-the-–inspect-argument-do-for-the-node-command" class="headerlink" title="What does the –inspect argument do for the node command?"></a>What does the –inspect argument do for the node command?</h3><p>Attaches Chrome DevTools to the Node instance for debugging purposes. You also probably want to use the –debug-brk option to have it break on first line.</p>
<hr>
<h3 id="When-working-with-streams-when-do-you-use-the-pipe-function-and-when-do-you-use-events-Can-those-two-methods-be-combined"><a href="#When-working-with-streams-when-do-you-use-the-pipe-function-and-when-do-you-use-events-Can-those-two-methods-be-combined" class="headerlink" title="When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?"></a>When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?</h3><p>Piping is used when you want to connect a readable stream to a writable stream and don’t need to worry about chunks. If you did want to manually handle chunks (for example if you were displaying a progress bar), then you would need to use events. And they can be combined like so;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">'./foo.js'</span>)</div><div class="line">rs.pipe(process.stdout)</div><div class="line">rs.on(<span class="string">'end'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'end'</span>) &#125;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Hamlet Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Hamlet-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="The-Ghost"><a href="#The-Ghost" class="headerlink" title="The Ghost"></a>The Ghost</h2><p>Revenge his most foul and unnatural murder<br><img src="/images/regex/hamlet1.JPG" alt=""></p>
<h2 id="Hamlet-and-Ophelia"><a href="#Hamlet-and-Ophelia" class="headerlink" title="Hamlet and Ophelia"></a>Hamlet and Ophelia</h2><p>To be, or not to be, that is the question<br><img src="/images/regex/hamlet2.JPG" alt=""></p>
<h2 id="The-Play"><a href="#The-Play" class="headerlink" title="The Play"></a>The Play</h2><p>He poisons him i’ the garden<br><img src="/images/regex/hamlet3.JPG" alt=""></p>
<h2 id="Laertes"><a href="#Laertes" class="headerlink" title="Laertes"></a>Laertes</h2><p>Too much of water has thou, poor Ophelia!<br><img src="/images/regex/hamlet4.JPG" alt=""></p>
<h2 id="Memento"><a href="#Memento" class="headerlink" title="Memento"></a>Memento</h2><p>Alas, poor Yorick! … A fellow of infinite jest<br><img src="/images/regex/hamlet5.JPG" alt=""></p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>Now cracks a noble heart. Good night, sweet prince<br><img src="/images/regex/hamlet6.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Volapük Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Volapuk-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Bal"><a href="#Bal" class="headerlink" title="Bal"></a>Bal</h2><p><img src="/images/regex/vola1.JPG" alt=""></p>
<h2 id="Tel"><a href="#Tel" class="headerlink" title="Tel"></a>Tel</h2><p>Omg that is cheeky.<br><img src="/images/regex/vola2.JPG" alt=""></p>
<h2 id="Kil"><a href="#Kil" class="headerlink" title="Kil"></a>Kil</h2><p><img src="/images/regex/vola3.JPG" alt=""></p>
<h2 id="Fol"><a href="#Fol" class="headerlink" title="Fol"></a>Fol</h2><p><img src="/images/regex/vola4.JPG" alt=""></p>
<h2 id="Lul"><a href="#Lul" class="headerlink" title="Lul"></a>Lul</h2><p><img src="/images/regex/vola5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Cities Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Cities-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Pisco-Sour"><a href="#Pisco-Sour" class="headerlink" title="Pisco Sour"></a>Pisco Sour</h2><p>Lima<br><img src="/images/regex/cities1.JPG" alt=""></p>
<h2 id="Roman-Latin"><a href="#Roman-Latin" class="headerlink" title="Roman Latin"></a>Roman Latin</h2><p>Londinium<br><img src="/images/regex/cities2.JPG" alt=""></p>
<h2 id="Big-and-hot"><a href="#Big-and-hot" class="headerlink" title="Big and hot"></a>Big and hot</h2><p>New York<br><img src="/images/regex/cities3.JPG" alt=""></p>
<h2 id="Alpha-World-City"><a href="#Alpha-World-City" class="headerlink" title="Alpha World City"></a>Alpha World City</h2><p>Kuala Lumpur<br><img src="/images/regex/cities4.JPG" alt=""></p>
<h2 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h2><p>Copenhagen<br><img src="/images/regex/cities5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Double Solutions]]></title>
      <url>/2017/06/21/Regex%20Crossword/Regex-Crossword-Double-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Telekinesis"><a href="#Telekinesis" class="headerlink" title="Telekinesis"></a>Telekinesis</h2><p>ET<br><img src="/images/regex/double1.JPG" alt=""></p>
<h2 id="GMC-Vandura"><a href="#GMC-Vandura" class="headerlink" title="GMC Vandura"></a>GMC Vandura</h2><p>A-Team<br><img src="/images/regex/double2.JPG" alt=""></p>
<h2 id="Bat-Man"><a href="#Bat-Man" class="headerlink" title="Bat Man"></a>Bat Man</h2><p>Nosferatu<br><img src="/images/regex/double3.JPG" alt=""></p>
<h2 id="Big-Mac"><a href="#Big-Mac" class="headerlink" title="Big Mac"></a>Big Mac</h2><p>Pulp Fiction<br><img src="/images/regex/double4.JPG" alt=""></p>
<h2 id="The-Lektor-Device"><a href="#The-Lektor-Device" class="headerlink" title="The Lektor Device"></a>The Lektor Device</h2><p>From Russia With Love<br><img src="/images/regex/double5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Palindromeda Solutions]]></title>
      <url>/2017/06/20/Regex%20Crossword/Regex-Crossword-Palindromeda-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Ten-o’clock"><a href="#Ten-o’clock" class="headerlink" title="Ten o’clock"></a>Ten o’clock</h2><p><img src="/images/regex/palin1.JPG" alt=""></p>
<h2 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h2><p><img src="/images/regex/palin2.JPG" alt=""></p>
<h2 id="Horn"><a href="#Horn" class="headerlink" title="Horn"></a>Horn</h2><p><img src="/images/regex/palin3.JPG" alt=""></p>
<h2 id="Open-the-lid"><a href="#Open-the-lid" class="headerlink" title="Open the lid"></a>Open the lid</h2><p><img src="/images/regex/palin4.JPG" alt=""></p>
<h2 id="Time-Walker"><a href="#Time-Walker" class="headerlink" title="Time Walker"></a>Time Walker</h2><p><img src="/images/regex/palin5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Experienced Solutions]]></title>
      <url>/2017/06/20/Regex%20Crossword/Regex-Crossword-Experienced-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Royal-Dinner"><a href="#Royal-Dinner" class="headerlink" title="Royal Dinner"></a>Royal Dinner</h2><p>Food fit for a king<br><img src="/images/regex/exp1.JPG" alt=""></p>
<h2 id="Regular-Workout"><a href="#Regular-Workout" class="headerlink" title="Regular Workout"></a>Regular Workout</h2><p>Regular expression of the day<br><img src="/images/regex/exp2.JPG" alt=""></p>
<h2 id="We-apologise-for-the-inconvenience"><a href="#We-apologise-for-the-inconvenience" class="headerlink" title="We apologise for the inconvenience"></a>We apologise for the inconvenience</h2><p>Answer the great question now<br><img src="/images/regex/exp3.JPG" alt=""></p>
<h2 id="Questionable"><a href="#Questionable" class="headerlink" title="Questionable"></a>Questionable</h2><p>Cross pattern<br><img src="/images/regex/exp4.JPG" alt=""></p>
<h2 id="Hamlet"><a href="#Hamlet" class="headerlink" title="Hamlet"></a>Hamlet</h2><p>To be or not to be a regular regx<br><img src="/images/regex/exp5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The 4-Hour Work Week]]></title>
      <url>/2017/06/19/The-4-Hour-Work-Week/</url>
      <content type="html"><![CDATA[<p>For more than a year, I have been meaning to read Tim Ferriss’s famous book which was semi-written for millennials. If you tend to read certain subreddits (<a href="http://www.reddit.com/r/financialindependance" target="_blank" rel="external">/r/financialindependance</a>, <a href="http://www.reddit.com/r/stoicism" target="_blank" rel="external">/r/stoicism</a>, etc) as I do then you will see his name come up on book recommendation threads. I also have friends who are into self improvement content, and they have been hounding me to read it so we can discuss it.</p>
<a id="more"></a>
<div class="bookcover"><br>  <img src="/images/bookcovers/The-4-Hour-Work-Week.jpg" height="185"><br></div>

<h2 id="Reactionary-attitude-towards-time-wasters"><a href="#Reactionary-attitude-towards-time-wasters" class="headerlink" title="Reactionary attitude towards time wasters"></a>Reactionary attitude towards time wasters</h2><p>His attitude towards time is clearly a result of having experienced being yet another small cog in yet another large corporate machine. He wants to work from home because he works faster without office disruptions. And who cares if you complete eight hours of work in one, because most of that eight is corporate paper pushing as an exercise in inefficiency. Therefore if you can work from home, you can get all your paper pushed as efficiently as possible.</p>
<p>When I’ve heard managers argue against working from home, it has been for this exact reason. That without a manager checking over their employees’ shoulders, an employee will produce the minimal threshold of work to fulfill the requirements. This creates an overhead of chasing up your employees which does not exist if I can see their computer screen from my desk. And time spent in the office is more than just work, but about building a team culture which produces a positive feedback loop on the output of the business.</p>
<p>You can see the clash between a collectivistic and individualistic attitude here. A collectivist attitude cares firstly about the business, and can even translate that into terms the individualist attitude can understand. “We are all in the same boat, sink or swim”. The issue Tim Ferriss is addressing is the individualist employee who has a complete view of this interaction and yet still wants to go kite surfing, the business be damned. Now where the reader stands on that will be reflected on their opinion of time theft.</p>
<h2 id="Hire-an-Indian"><a href="#Hire-an-Indian" class="headerlink" title="Hire an Indian"></a>Hire an Indian</h2><p>One of Tim’s main arguments is to automate huge chunks of your life. What about tasks that require a minimum level of human decision making? Hire an Indian. You can get a personal assistant, that understands English and how to use a computer for $4.50 per hour. For example, farming the contact details for a list of people who match certain criteria.</p>
<p>It reminds me of this craze in Silicon Valley where rich people pay young healthy people for blood transfusions because it will extend their lifespan. Which is a great example of the human fear of the inevitability of death. I remember learning about this when Hulk Hogan’s court case was a big deal because apparently Peter Thiel does this? Anyway, to the point. So if this blood is aging you, does the young healthy donor age faster? Then are you basically buying years from someone else’s life? For a book about not wasting your precious hours, how do you, the reader, feel about this?</p>
<p>Imagine you are in a pointless meeting, and you offer to pay your boss $50 to let you leave. Now imagine you skip the meeting, and pay an Indian to summarize the minutes of that meeting for $50. Ponder the differences. The business is the source of the inefficiency and you are taking advantage of how poor this third party is, to buy back the time the business is wasting.</p>
<p> And I totally get why. Trying to solve the underlying issue is going to be impossible. You’d be trying to change the work culture in your whole industry. You can do this to an extent, carve out a small pocket of sanity. This is what he does when he enforces a policy of doing business through emails. But that only goes so far, so you hire a personal assistant. And that makes total sense. But, man, just to start, its depressing as hell.</p>
<h2 id="The-book-is-part-of-the-argument"><a href="#The-book-is-part-of-the-argument" class="headerlink" title="The book is part of the argument"></a>The book is part of the argument</h2><p>In the book, Tim writes that one of the easiest ways to a four hour work week is to create a niche product that you can sell online, preferably digital. Then after you have built up the necessary platform and ad base, you can move to automating the process. Then you sit back, put your feet up, and enjoy profits roll in. For example, write a book.</p>
<p>In order for your book to sell, you need to become an “expert” on a topic. That comes from having validation from a respectable source, such as a certification body. Ok, so this is where the problem comes in. Is Tim Ferriss a respectable source for entrepreneurship advice? Yes. Because he started a successful supplement product line. He was validated by the free market.</p>
<p>So is the book, just another source of passive income for Tim? Could it be, that he got lucky, then realizing that he could claim it was part of a proven process, he could create a positive feedback loop. He writes a book, that at the most basic level is just saying “create sources of passive income”, of which the book is a passive source of income for him. He’s not lying, but what he is selling isn’t what you think it is.</p>
<p>Because you buy the book, assuming it is an instruction manual that you can use to duplicate his success. Which it could be. But you don’t know that, because it could equally be in the author’s interest to lie to you and sell you a book full of dreams. He wants people to think its possible, because then his passive income works and then it becomes possible. But only for him.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I had more thoughts, but this was about the amount that I wanted to write. I definitely gleaned some good advice, and I think I will keep my eyes open for niche markets in the next few years at university. But I also can see why he gets called a douchebag. Consider the following from the book.</p>
<blockquote>
<p>“Learn to be difficult when it counts. In school as in life, having a reputation for being assertive will help you receive preferential treatment without having to beg or fight for it every time.”</p>
<p>― <strong>Timothy Ferriss, The 4-Hour Workweek</strong></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Book Reviews </category>
            
        </categories>
        
        
        <tags>
            
            <tag> non-fiction </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Crossword Intermediate Solutions]]></title>
      <url>/2017/06/19/Regex%20Crossword/Regex-Crossword-Intermediate-Solutions/</url>
      <content type="html"><![CDATA[<p><a href="https://www.regexcrossword.com" target="_blank" rel="external">Play Regex Crossword here</a></p>
<a id="more"></a>
<h2 id="Always-remember"><a href="#Always-remember" class="headerlink" title="Always remember"></a>Always remember</h2><p>A towel<br><img src="/images/regex/int1.JPG" alt=""></p>
<h2 id="Johnny"><a href="#Johnny" class="headerlink" title="Johnny"></a>Johnny</h2><p>Walker<br><img src="/images/regex/int2.JPG" alt=""></p>
<h2 id="Earth"><a href="#Earth" class="headerlink" title="Earth"></a>Earth</h2><p>Forty-two<br><img src="/images/regex/int3.JPG" alt=""></p>
<h2 id="Encyclopedia"><a href="#Encyclopedia" class="headerlink" title="Encyclopedia"></a>Encyclopedia</h2><p>Dont panic<br><img src="/images/regex/int4.JPG" alt=""></p>
<h2 id="Technology"><a href="#Technology" class="headerlink" title="Technology"></a>Technology</h2><p>Turn off and on<br><img src="/images/regex/int5.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Fun and Games </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex crossword </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
